{"version":3,"sources":["webpack://babylon-mtoon-material/webpack/universalModuleDefinition","webpack://babylon-mtoon-material/webpack/bootstrap","webpack://babylon-mtoon-material/./src/inspectable-custom-properties.ts","webpack://babylon-mtoon-material/./src/mtoon-material-defines.ts","webpack://babylon-mtoon-material/./src/mtoon-material.ts","webpack://babylon-mtoon-material/./src/mtoon-outline-renderer.ts","webpack://babylon-mtoon-material/./src/shaders/bump-fragment.frag","webpack://babylon-mtoon-material/./src/shaders/fragment-declaration.frag","webpack://babylon-mtoon-material/./src/shaders/light-fragment.frag","webpack://babylon-mtoon-material/./src/shaders/mtoon-fragment-functions.frag","webpack://babylon-mtoon-material/./src/shaders/mtoon.frag","webpack://babylon-mtoon-material/./src/shaders/mtoon.vert","webpack://babylon-mtoon-material/./src/shaders/ubo-declaration.vert","webpack://babylon-mtoon-material/./src/shaders/vertex-declaration.vert","webpack://babylon-mtoon-material/./src/test/index.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;;ACvJA;AAAA;AAAA;AAAkF;AAElF;;;;GAIG;AACI,SAAS,8BAA8B;IAC1C,OAAO;QACH;YACI,KAAK,EAAE,cAAc;YACrB,YAAY,EAAE,cAAc;YAC5B,IAAI,EAAE,iFAAe,CAAC,MAAM;SAC/B;QACD;YACI,KAAK,EAAE,cAAc;YACrB,YAAY,EAAE,cAAc;YAC5B,IAAI,EAAE,iFAAe,CAAC,MAAM;SAC/B;QACD;YACI,KAAK,EAAE,eAAe;YACtB,YAAY,EAAE,eAAe;YAC7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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylon-mtoon-material\"] = factory();\n\telse\n\t\troot[\"babylon-mtoon-material\"] = factory();\n})(window, function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"main\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpbabylon_mtoon_material\"] = window[\"webpackJsonpbabylon_mtoon_material\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./src/test/index.ts\",\"vendors~main\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { InspectableType, IInspectable } from '@babylonjs/core/Misc/iInspectable';\r\n\r\n/**\r\n * MToonMaterial に Inspector 上で調整可能なパラメータを設定する\r\n * @param material\r\n * @link https://doc.babylonjs.com/toolsAndResources/tools/inspector#extensibility\r\n */\r\nexport function getInspectableCustomProperties(): IInspectable[] {\r\n    return [\r\n        {\r\n            label: 'DiffuseColor',\r\n            propertyName: 'diffuseColor',\r\n            type: InspectableType.Color3,\r\n        },\r\n        {\r\n            label: 'AmbientColor',\r\n            propertyName: 'ambientColor',\r\n            type: InspectableType.Color3,\r\n        },\r\n        {\r\n            label: 'EmissiveColor',\r\n            propertyName: 'emissiveColor',\r\n            type: InspectableType.Color3,\r\n        },\r\n        {\r\n            label: 'ShadeColor',\r\n            propertyName: 'shadeColor',\r\n            type: InspectableType.Color3,\r\n        },\r\n        {\r\n            label: 'RimColor',\r\n            propertyName: 'rimColor',\r\n            type: InspectableType.Color3,\r\n        },\r\n        {\r\n            label: 'OutlineColor',\r\n            propertyName: 'outlineColor',\r\n            type: InspectableType.Color3,\r\n        },\r\n        {\r\n            label: 'ReceiveShadowRate',\r\n            propertyName: 'receiveShadowRate',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'ShadingGradeRate',\r\n            propertyName: 'shadingGradeRate',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'ShadeShift',\r\n            propertyName: 'shadeShift',\r\n            type: InspectableType.Slider,\r\n            min: -1,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'ShadeToony',\r\n            propertyName: 'shadeToony',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'LightColorAttenuation',\r\n            propertyName: 'lightColorAttenuation',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'IndirectLightIntensity',\r\n            propertyName: 'indirectLightIntensity',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'RimLightingMix',\r\n            propertyName: 'rimLightingMix',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'RimFresnelPower',\r\n            propertyName: 'rimFresnelPower',\r\n            type: InspectableType.Slider,\r\n            min: 0.01,\r\n            max: 100,\r\n            step: 4,\r\n        },\r\n        {\r\n            label: 'RimLift',\r\n            propertyName: 'rimLift',\r\n            type: InspectableType.Slider,\r\n            min: 0.0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'OutlineWidth',\r\n            propertyName: 'outlineWidth',\r\n            type: InspectableType.Slider,\r\n            min: 0.01,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'OutlineScaledMaxDistance',\r\n            propertyName: 'outlineScaledMaxDistance',\r\n            type: InspectableType.Slider,\r\n            min: 1.0,\r\n            max: 10.0,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'OutlineLightingMix',\r\n            propertyName: 'outlineLightingMix',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'DebugMode',\r\n            propertyName: 'debugMode',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 2,\r\n            step: 1,\r\n        },\r\n        {\r\n            label: 'OutlineWidthMode',\r\n            propertyName: 'outlineWidthMode',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 2,\r\n            step: 1,\r\n        },\r\n        {\r\n            label: 'OutlineColorMode',\r\n            propertyName: 'outlineColorMode',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 1,\r\n        },\r\n        {\r\n            label: 'CullMode',\r\n            propertyName: 'cullMode',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 2,\r\n            step: 1,\r\n        },\r\n        {\r\n            label: 'OutlineCullMode',\r\n            propertyName: 'outlineCullMode',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 2,\r\n            step: 1,\r\n        },\r\n        {\r\n            label: 'AlphaCutOff',\r\n            propertyName: 'alphaCutOff',\r\n            type: InspectableType.Slider,\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.01,\r\n        },\r\n        {\r\n            label: 'UV Animation Scroll X',\r\n            propertyName: 'uvAnimationScrollX',\r\n            type: InspectableType.Slider,\r\n            min: -1,\r\n            max: 1,\r\n            step: 0.1,\r\n        },\r\n        {\r\n            label: 'UV Animation Scroll Y',\r\n            propertyName: 'uvAnimationScrollY',\r\n            type: InspectableType.Slider,\r\n            min: -1,\r\n            max: 1,\r\n            step: 0.1,\r\n        },\r\n        {\r\n            label: 'UV Animation Rotation',\r\n            propertyName: 'uvAnimationRotation',\r\n            type: InspectableType.Slider,\r\n            min: -0.5,\r\n            max: 0.5,\r\n            step: 0.01,\r\n        },\r\n    ];\r\n}\r\n","import { MaterialDefines } from '@babylonjs/core/Materials/materialDefines';\r\nimport { IImageProcessingConfigurationDefines } from '@babylonjs/core/Materials/imageProcessingConfiguration';\r\n\r\n/**\r\n * Material Defines\r\n */\r\nexport class MToonMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    /** @see light-fragment.frag */\r\n    public CUSTOMUSERLIGHTING = true;\r\n\r\n    // MToon Specific\r\n    public MTOON_OUTLINE_WIDTH_WORLD = false;\r\n    public MTOON_OUTLINE_WIDTH_SCREEN = false;\r\n    public MTOON_OUTLINE_COLOR_FIXED = false;\r\n    public MTOON_OUTLINE_COLOR_MIXED = false;\r\n    public MTOON_DEBUG_NORMAL = false;\r\n    public MTOON_DEBUG_LITSHADERRATE = false;\r\n\r\n    // MToon textures\r\n    public SHADE = false;\r\n    public SHADEDIRECTUV = 0;\r\n    public RECEIVE_SHADOW = false;\r\n    public RECEIVE_SHADOWDIRECTUV = 0;\r\n    public SHADING_GRADE = false;\r\n    public SHADING_GRADEDIRECTUV = 0;\r\n    public RIM = false;\r\n    public RIMDIRECTUV = 0;\r\n    public MATCAP = false;\r\n    public MATCAPDIRECTUV = 0;\r\n    public OUTLINE_WIDTH = false;\r\n    public OUTLINE_WIDTHDIRECTUV = 0;\r\n    public UV_ANIMATION_MASK = false;\r\n    public UV_ANIMATION_MASKDIRECTUV = 0;\r\n\r\n    // Misc\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public DIFFUSE = false;\r\n    public DIFFUSEDIRECTUV = 0;\r\n    public BAKED_VERTYEX_ANIMATION_TEXTURE = false;\r\n    // public AMBIENT = false;\r\n    // public AMBIENTDIRECTUV = 0;\r\n    // public OPACITY = false;\r\n    // public OPACITYDIRECTUV = 0;\r\n    // public OPACITYRGB = false;\r\n    // public REFLECTION = false;\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    // public SPECULAR = false;\r\n    // public SPECULARDIRECTUV = 0;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public PARALLAX = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    // public SPECULAROVERALPHA = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHAFROMDIFFUSE = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    // public SPECULARTERM = false;\r\n    // public DIFFUSEFRESNEL = false;\r\n    // public OPACITYFRESNEL = false;\r\n    // public REFLECTIONFRESNEL = false;\r\n    // public REFRACTIONFRESNEL = false;\r\n    // public EMISSIVEFRESNEL = false;\r\n    // public FRESNEL = false;\r\n    public NORMAL = false;\r\n    // public TANGENT = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    // public INSTANCESCOLOR = false;\r\n    // public GLOSSINESS = false;\r\n    // public ROUGHNESS = false;\r\n    // public EMISSIVEASILLUMINATION = false;\r\n    // public LINKEMISSIVEWITHDIFFUSE = false;\r\n    // public REFLECTIONFRESNELFROMSPECULAR = false;\r\n    // public LIGHTMAP = false;\r\n    // public LIGHTMAPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    // public USELIGHTMAPASSHADOWMAP = false;\r\n    // public REFLECTIONMAP_3D = false;\r\n    // public REFLECTIONMAP_SPHERICAL = false;\r\n    // public REFLECTIONMAP_PLANAR = false;\r\n    // public REFLECTIONMAP_CUBIC = false;\r\n    // public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    // public USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n    // public REFLECTIONMAP_PROJECTION = false;\r\n    // public REFLECTIONMAP_SKYBOX = false;\r\n    // public REFLECTIONMAP_EXPLICIT = false;\r\n    // public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    // public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    // public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    // public REFLECTIONMAP_OPPOSITEZ = false;\r\n    // public INVERTCUBICMAP = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    // public REFRACTION = false;\r\n    // public REFRACTIONMAP_3D = false;\r\n    // public REFLECTIONOVERALPHA = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n    public NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\r\n    public PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\r\n    public ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\r\n    public ALPHABLEND = true;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    // public RGBDLIGHTMAP = false;\r\n    // public RGBDREFLECTION = false;\r\n    // public RGBDREFRACTION = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n\r\n    // /**\r\n    //  * If the reflection texture on this material is in linear color space\r\n    //  * @hidden\r\n    //  */\r\n    public IS_REFLECTION_LINEAR = false;\r\n    // /**\r\n    //  * If the refraction texture on this material is in linear color space\r\n    //  * @hidden\r\n    //  */\r\n    public IS_REFRACTION_LINEAR = false;\r\n    public EXPOSURE = false;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string, default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    public setReflectionMode(modeToEnable: string) {\r\n        throw new Error('This material cannot use `setReflectionMode`');\r\n    }\r\n}\r\n","import { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from '@babylonjs/core/Misc/decorators';\r\nimport { Observer } from '@babylonjs/core/Misc/observable';\r\nimport { SmartArray } from '@babylonjs/core/Misc/smartArray';\r\nimport { IAnimatable } from '@babylonjs/core/Animations/animatable.interface';\r\n\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Scene } from '@babylonjs/core/scene';\r\nimport { Matrix, Vector4 } from '@babylonjs/core/Maths/math.vector';\r\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\r\nimport { VertexBuffer } from '@babylonjs/core/Buffers/buffer';\r\nimport { SubMesh } from '@babylonjs/core/Meshes/subMesh';\r\nimport { AbstractMesh } from '@babylonjs/core/Meshes/abstractMesh';\r\nimport { Mesh } from '@babylonjs/core/Meshes/mesh';\r\nimport { PrePassConfiguration } from '@babylonjs/core/Materials/prePassConfiguration';\r\n\r\nimport { ImageProcessingConfiguration } from '@babylonjs/core/Materials/imageProcessingConfiguration';\r\nimport { ColorCurves } from '@babylonjs/core/Materials/colorCurves';\r\nimport { Material, ICustomShaderNameResolveOptions } from '@babylonjs/core/Materials/material';\r\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\r\nimport { PushMaterial } from '@babylonjs/core/Materials/pushMaterial';\r\nimport { MaterialHelper } from '@babylonjs/core/Materials/materialHelper';\r\n\r\nimport { BaseTexture } from '@babylonjs/core/Materials/Textures/baseTexture';\r\nimport { RenderTargetTexture } from '@babylonjs/core/Materials/Textures/renderTargetTexture';\r\n\r\nimport { Constants } from '@babylonjs/core/Engines/constants';\r\nimport { EffectFallbacks } from '@babylonjs/core/Materials/effectFallbacks';\r\nimport { Effect, IEffectCreationOptions } from '@babylonjs/core/Materials/effect';\r\nimport { DetailMapConfiguration } from '@babylonjs/core/Materials/material.detailMapConfiguration';\r\nimport { MaterialPluginEvent } from '@babylonjs/core/Materials/materialPluginEvent';\r\nimport { UniformBuffer } from '@babylonjs/core/Materials/uniformBuffer';\r\n\r\nimport { getInspectableCustomProperties } from './inspectable-custom-properties';\r\nimport { MToonOutlineRenderer } from './mtoon-outline-renderer';\r\nimport { MToonMaterialDefines } from './mtoon-material-defines';\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n// get shader string\r\nconst UboDeclaration = require('./shaders/ubo-declaration.vert').default;\r\nconst VertexDeclaration = require('./shaders/vertex-declaration.vert').default;\r\nconst FragmentDeclaration = require('./shaders/fragment-declaration.frag').default;\r\nconst FragmentFunctions = require('./shaders/mtoon-fragment-functions.frag').default;\r\nconst BumpFragment = require('./shaders/bump-fragment.frag').default;\r\nconst LightFragment = require('./shaders/light-fragment.frag').default;\r\nconst VertexShader = require('./shaders/mtoon.vert').default;\r\nconst FragmentShader = require('./shaders/mtoon.frag').default;\r\n\r\n/**\r\n * Debug shading mode\r\n */\r\nexport enum DebugMode {\r\n    None = 0,\r\n    Normal,\r\n    LitShadeRate,\r\n}\r\n/**\r\n * Outline color mode\r\n */\r\nexport enum OutlineColorMode {\r\n    FixedColor = 0,\r\n    MixedLighting,\r\n}\r\n/**\r\n * Outline width mode\r\n */\r\nexport enum OutlineWidthMode {\r\n    None = 0,\r\n    WorldCorrdinates,\r\n    ScreenCoordinates,\r\n}\r\n/**\r\n * Cull mode\r\n */\r\nexport enum CullMode {\r\n    Off = 0,\r\n    Front,\r\n    Back,\r\n}\r\n\r\n/**\r\n * MToon は日本のアニメ的表現をすることを目標としています。\r\n * 主色 (Lit Color) と陰色 (Shade Color) の 2 色を、Lighting パラメータや光源環境に応じて混合することでそれを実現します。\r\n * VRM での出力パラメータとプロパティのマッピングは下記となります。\r\n *\r\n * MToon aims for making Japanese anime expressions.\r\n * It is achieved by mixing Lit Color and Shade Color based on Lighting parameters and light source environment.\r\n *\r\n * @see https://github.com/Santarh/MToon/\r\n * @see https://vrm.dev/univrm/shaders/mtoon/\r\n * @see https://doc.babylonjs.com/babylon101/materials\r\n */\r\nexport class MToonMaterial extends PushMaterial {\r\n//#region Properties\r\n//#region Textures\r\n    @serializeAsTexture('diffuseTexture')\r\n    private _diffuseTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The basic texture of the material as viewed under a light.\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesAndMiscDirty')\r\n    public diffuseTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('emissiveTexture')\r\n    private _emissiveTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define texture of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public emissiveTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('bumpTexture')\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Bump mapping is a technique to simulate bump and dents on a rendered surface.\r\n     * These are made by creating a normal map from an image. The means to do this can be found on the web, a search for 'normal map generator' will bring up free and paid for methods of doing this.\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#bump-map\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('shadeTexture')\r\n    private _shadeTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The basic texture of the material as viewed does not receive a light\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public shadeTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('receiveShadowTexture')\r\n    private _receiveShadowTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Receiving shadow rate with texture\r\n     * receiveShadowRate * texture.a\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public receiveShadowTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('shadingGradeTexture')\r\n    private _shadingGradeTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Shading grade rate\r\n     * shadingGradeRate * (1.0 - texture.r))\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public shadingGradeTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('rimTexture')\r\n    private _rimTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Parametric Rim Lighting\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public rimTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('matCapTexture')\r\n    private _matCapTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * MatCap Lighting\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public matCapTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('outlineWidthTexture')\r\n    private _outlineWidthTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Adjust outline width\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public outlineWidthTexture: Nullable<BaseTexture> = null;\r\n\r\n    @serializeAsTexture('outlineWidthTexture')\r\n    private _uvAnimationMaskTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * UV animation mask\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public uvAnimationMaskTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * the list of textures\r\n     *\r\n     * @returns {Array<Nullable<BaseTexture>>}\r\n     */\r\n    private get appendedTextures(): Array<Nullable<BaseTexture>> {\r\n        return [\r\n            this._diffuseTexture,\r\n            this._emissiveTexture,\r\n            this._bumpTexture,\r\n            this._shadeTexture,\r\n            this._receiveShadowTexture,\r\n            this._shadingGradeTexture,\r\n            this._rimTexture,\r\n            this._matCapTexture,\r\n            this._outlineWidthTexture,\r\n            this._uvAnimationMaskTexture,\r\n        ];\r\n    }\r\n    /**\r\n     * the list of active textures\r\n     *\r\n     * @returns {BaseTexture[]}\r\n     */\r\n    private get appendedActiveTextures(): BaseTexture[] {\r\n        return this.appendedTextures.filter((t) => t !== null) as BaseTexture[];\r\n    }\r\n//#endregion\r\n//#region Colors\r\n    /**\r\n     * Multiplier of diffuseTexture\r\n     */\r\n     @serializeAsColor3('diffuse')\r\n     public diffuseColor = new Color3(1.0, 1.0, 1.0);\r\n     /**\r\n      * babylon.js Ambient light\r\n      */\r\n     @serialize('ambient')\r\n     public ambientColor = new Color3(0.0, 0.0, 0.0);\r\n     /**\r\n      * Emissive color\r\n      */\r\n     @serialize('emissive')\r\n     public emissiveColor = new Color3(0.0, 0.0, 0.0);\r\n     /**\r\n      * Multiplier of shadeTexture\r\n      */\r\n     @serialize('shade')\r\n     public shadeColor = new Color3(0.97, 0.81, 0.86);\r\n     /**\r\n      * Rim color\r\n      */\r\n     @serialize('rim')\r\n     public rimColor = new Color3(0.0, 0.0, 0.0);\r\n     /**\r\n      * Outline color\r\n      */\r\n     @serialize('outline')\r\n     public outlineColor = new Color3(0.0, 0.0, 0.0);\r\n //#endregion\r\n//#region StandardMaterial parameters\r\n    /**\r\n     * If true, the emissive value is added into the end result, otherwise it is multiplied in.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public readonly useEmissiveAsIllumination = false;\r\n    /**\r\n     * If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing\r\n     * the emissive level when the final color is close to one.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public readonly linkEmissiveWithDiffuse = false;\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public readonly useReflectionOverAlpha = false;\r\n    @serialize('disableLighting')\r\n    private _disableLighting = false;\r\n    /**\r\n     * Does lights from the scene impacts this material.\r\n     * It can be a nice trick for performance to disable lighting on a fully emissive material.\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsLightsDirty')\r\n    public disableLighting: boolean;\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     * No support\r\n     */\r\n    public readonly useObjectSpaceNormalMap: boolean = false;\r\n    /**\r\n     * Is parallax enabled or not.\r\n     * @see https://doc.babylonjs.com/how_to/using_parallax_mapping\r\n     * No support\r\n     */\r\n    public readonly useParallax: boolean = false;\r\n    /**\r\n     * Is parallax occlusion enabled or not.\r\n     * If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration.\r\n     * @see https://doc.babylonjs.com/how_to/using_parallax_mapping\r\n     * No support\r\n     */\r\n    public readonly useParallaxOcclusion: boolean = false;\r\n    /**\r\n     * No support for specular\r\n     */\r\n    public readonly specularSupported: boolean = false;\r\n    /**\r\n     * In case of light mapping, define whether the map contains light or shadow informations.\r\n     * No support\r\n     */\r\n    public readonly useLightmapAsShadowmap: boolean = false;\r\n    /**\r\n     * No support for vertex colors\r\n     */\r\n    public readonly useVertexColor: boolean = false;\r\n    /**\r\n     * Support for bones in shader\r\n     */\r\n    public readonly useBones: boolean = true;\r\n    /**\r\n     * Support for morph targets in shader\r\n     */\r\n    public readonly useMorphTargets: boolean = true;\r\n    /**\r\n     * No support for vertex alpha\r\n     */\r\n    public readonly useVertexAlpha: boolean = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    public alphaCutOff = 0.4;\r\n    @serialize('useAlphaFromDiffuseTexture')\r\n    private _useAlphaFromDiffuseTexture = true;\r\n    /**\r\n     * Does the transparency come from the diffuse texture alpha channel.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public useAlphaFromDiffuseTexture: boolean;\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    /**\r\n     * Defines the maximum number of lights that can be used in the material\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n    /**\r\n     * inverted state equals with Unity\r\n     */\r\n    @serialize(\"invertNormalMapX\")\r\n    private _invertNormalMapX = true;\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX: boolean;\r\n    /**\r\n     * inverted state equals with Unity\r\n     */\r\n    @serialize(\"invertNormalMapY\")\r\n    private _invertNormalMapY = true;\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY: boolean;\r\n    @serialize('twoSidedLighting')\r\n    private _twoSidedLighting = false;\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    @expandToProperty('_markAllSubMeshesAsTexturesDirty')\r\n    public twoSidedLighting: boolean;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        this._attachImageProcessingConfiguration(value);\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        }\r\n        else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get cameraColorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set cameraColorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get cameraColorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set cameraColorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get cameraToneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set cameraToneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public get cameraExposure(): number {\r\n        return this._imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public set cameraExposure(value: number) {\r\n        this._imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets The camera contrast used on this material.\r\n     */\r\n    public get cameraContrast(): number {\r\n        return this._imageProcessingConfiguration.contrast;\r\n    }\r\n\r\n    /**\r\n     * Sets The camera contrast used on this material.\r\n     */\r\n    public set cameraContrast(value: number) {\r\n        this._imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public get cameraColorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public set cameraColorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this._imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public get cameraColorCurves(): Nullable<ColorCurves> {\r\n        return this._imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public set cameraColorCurves(value: Nullable<ColorCurves>) {\r\n        this._imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n    protected _worldViewProjectionMatrix = Matrix.Zero();\r\n    protected _globalAmbientColor = new Color3(0, 0, 0);\r\n    protected _useLogarithmicDepth: boolean;\r\n    protected _cacheHasRenderTargetTextures = false;\r\n//#endregion\r\n//#region MToon parameters\r\n    private _bumpScale = 1.0;\r\n    @serialize()\r\n    public get bumpScale() {\r\n        return this._bumpScale;\r\n    }\r\n    public set bumpScale(value: number) {\r\n        this._bumpScale = value;\r\n    }\r\n    private _receiveShadowRate = 1.0;\r\n    @serialize()\r\n    public get receiveShadowRate() {\r\n        return this._receiveShadowRate;\r\n    }\r\n    public set receiveShadowRate(value: number) {\r\n        this._receiveShadowRate = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _shadingGradeRate = 1.0;\r\n    @serialize()\r\n    public get shadingGradeRate() {\r\n        return this._shadingGradeRate;\r\n    }\r\n    public set shadingGradeRate(value: number) {\r\n        this._shadingGradeRate = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _shadeShift = 0.0;\r\n    @serialize()\r\n    public get shadeShift() {\r\n        return this._shadeShift;\r\n    }\r\n    public set shadeShift(value: number) {\r\n        this._shadeShift = Math.max(-1.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _shadeToony = 0.9;\r\n    @serialize()\r\n    public get shadeToony() {\r\n        return this._shadeToony;\r\n    }\r\n    public set shadeToony(value: number) {\r\n        this._shadeToony = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _lightColorAttenuation = 0.0;\r\n    @serialize()\r\n    public get lightColorAttenuation() {\r\n        return this._lightColorAttenuation;\r\n    }\r\n    public set lightColorAttenuation(value: number) {\r\n        this._lightColorAttenuation = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _indirectLightIntensity = 0.1;\r\n    @serialize()\r\n    public get indirectLightIntensity() {\r\n        return this._indirectLightIntensity;\r\n    }\r\n    public set indirectLightIntensity(value: number) {\r\n        this._indirectLightIntensity = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _rimLightingMix = 0;\r\n    @serialize()\r\n    public get rimLightingMix() {\r\n        return this._rimLightingMix;\r\n    }\r\n    public set rimLightingMix(value: number) {\r\n        this._rimLightingMix = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _rimFresnelPower = 1;\r\n    @serialize()\r\n    public get rimFresnelPower() {\r\n        return this._rimFresnelPower;\r\n    }\r\n    public set rimFresnelPower(value: number) {\r\n        this._rimFresnelPower = Math.max(0.0, Math.min(100.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _rimLift = 0;\r\n    @serialize()\r\n    public get rimLift() {\r\n        return this._rimLift;\r\n    }\r\n    public set rimLift(value: number) {\r\n        this._rimLift = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsLightsDirty();\r\n    }\r\n    private _outlineWidth = 0.5;\r\n    @serialize()\r\n    public get outlineWidth() {\r\n        return this._outlineWidth;\r\n    }\r\n    public set outlineWidth(value: number) {\r\n        this._outlineWidth = Math.max(0.01, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsAttributesDirty();\r\n    }\r\n    private _outlineScaledMaxDistance = 1.0;\r\n    @serialize()\r\n    public get outlineScaledMaxDistance() {\r\n        return this._outlineScaledMaxDistance;\r\n    }\r\n    public set outlineScaledMaxDistance(value: number) {\r\n        this._outlineScaledMaxDistance = Math.max(1.0, Math.min(10.0, value));\r\n        this._markAllSubMeshesAsAttributesDirty();\r\n    }\r\n    private _outlineLightingMix = 1.0;\r\n    @serialize()\r\n    public get outlineLightingMix() {\r\n        return this._outlineLightingMix;\r\n    }\r\n    public set outlineLightingMix(value: number) {\r\n        this._outlineLightingMix = Math.max(0.0, Math.min(1.0, value));\r\n        this._markAllSubMeshesAsAttributesDirty();\r\n    }\r\n    private _uvAnimationScrollX = 0.0;\r\n    @serialize()\r\n    public get uvAnimationScrollX() {\r\n        return this._uvAnimationScrollX;\r\n    }\r\n    public set uvAnimationScrollX(value: number) {\r\n        this._uvAnimationScrollX = value;\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n    private _uvAnimationScrollY = 0.0;\r\n    @serialize()\r\n    public get uvAnimationScrollY() {\r\n        return this._uvAnimationScrollY;\r\n    }\r\n    public set uvAnimationScrollY(value: number) {\r\n        this._uvAnimationScrollY = value;\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n    private _uvAnimationRotation = 0.0;\r\n    @serialize()\r\n    public get uvAnimationRotation() {\r\n        return this._uvAnimationRotation;\r\n    }\r\n    public set uvAnimationRotation(value: number) {\r\n        this._uvAnimationRotation = value;\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    @serialize('alphaTest')\r\n    private _alphaTest = false;\r\n    @serialize()\r\n    public get alphaTest() {\r\n        return this._alphaTest;\r\n    }\r\n    public set alphaTest(value: boolean) {\r\n        this._alphaTest = value;\r\n        if (value) {\r\n            if (this.alphaBlend) {\r\n                this._transparencyMode = Material.MATERIAL_ALPHATESTANDBLEND;\r\n            } else {\r\n                this._transparencyMode = Material.MATERIAL_ALPHATEST;\r\n            }\r\n        } else {\r\n            this._transparencyMode = Material.MATERIAL_OPAQUE;\r\n        }\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n    private _alphaBlend = false;\r\n    @serialize()\r\n    public get alphaBlend() {\r\n        return this._alphaBlend;\r\n    }\r\n    public set alphaBlend(value: boolean) {\r\n        this._alphaBlend = value;\r\n        if (value) {\r\n            this.backFaceCulling = true;\r\n            if (this.alphaTest) {\r\n                this._transparencyMode = Material.MATERIAL_ALPHATESTANDBLEND;\r\n            } else {\r\n                this._transparencyMode = Material.MATERIAL_ALPHABLEND;\r\n            }\r\n        } else {\r\n            this._transparencyMode = Material.MATERIAL_OPAQUE;\r\n        }\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n    @serialize('debugMode')\r\n    private _debugMode = DebugMode.None;\r\n    /** @hidden */\r\n    @expandToProperty('_markAllSubMeshesAsMiscDirty')\r\n    public debugMode: DebugMode = DebugMode.None;\r\n\r\n    private outlineRenderer?: MToonOutlineRenderer;\r\n    private _outlineWidthMode: OutlineWidthMode = OutlineWidthMode.None;\r\n    public get outlineWidthMode() {\r\n        return this._outlineWidthMode;\r\n    }\r\n    public set outlineWidthMode(value: OutlineWidthMode) {\r\n        this._outlineWidthMode = value;\r\n        if (value !== OutlineWidthMode.None && !this.outlineRenderer) {\r\n            /**\r\n             * このマテリアル用のアウトラインレンダラーを生成する\r\n             */\r\n            this.outlineRenderer = new MToonOutlineRenderer(this.getScene(), this);\r\n        }\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n    @expandToProperty('_markAllSubMeshesAsMiscDirty')\r\n    public outlineColorMode: OutlineColorMode = OutlineColorMode.MixedLighting;\r\n    private _cullMode: CullMode = CullMode.Back;\r\n    @serialize()\r\n    public get cullMode() {\r\n      return this._cullMode;\r\n    }\r\n    public set cullMode(value: CullMode) {\r\n        this._cullMode = value;\r\n        switch (this._cullMode) {\r\n            case CullMode.Off:\r\n                // 両面を描画する\r\n                this.backFaceCulling = false;\r\n                this.sideOrientation = Material.ClockWiseSideOrientation;\r\n                this.twoSidedLighting = false;\r\n                break;\r\n            case CullMode.Front:\r\n                // 表面を描画しない(=裏面だけ描画する)\r\n                this.backFaceCulling = true;\r\n                this.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n                this.twoSidedLighting = true;\r\n                break;\r\n            case CullMode.Back:\r\n                // 裏面を描画しない(=表面だけ描画する) デフォルト\r\n                this.backFaceCulling = true;\r\n                this.sideOrientation = Material.ClockWiseSideOrientation;\r\n                this.twoSidedLighting = false;\r\n                break;\r\n        }\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n    @serialize()\r\n    private _outlineCullMode = CullMode.Front;\r\n    @expandToProperty('_markAllSubMeshesAsMiscDirty')\r\n    public outlineCullMode: CullMode = CullMode.Front;\r\n    private storedCullMode = CullMode.Back;\r\n    /**\r\n     * アウトライン用 CullMode を設定\r\n     * @hidden\r\n     */\r\n    public applyOutlineCullMode(): void {\r\n        this.storedCullMode = this.cullMode;\r\n        this.cullMode = this._outlineCullMode;\r\n    }\r\n    /**\r\n     * CullMode をリストア\r\n     * @hidden\r\n     */\r\n    public restoreOutlineCullMode(): void {\r\n        this.cullMode = this.storedCullMode;\r\n    }\r\n    /**\r\n     * @hidden\r\n     */\r\n    public getOutlineRendererName(): string {\r\n        if (!this.outlineRenderer) {\r\n            return '';\r\n        }\r\n        return this.outlineRenderer.name;\r\n    }\r\n//#endregion\r\n//#endregion\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.detailMap = new DetailMapConfiguration(this as unknown as StandardMaterial);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            // if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            //     this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            // }\r\n\r\n            // if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            //     this._renderTargets.push(<RenderTargetTexture>this._refractionTexture);\r\n            // }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n\r\n        // Register shaders to ShadersStore\r\n        if (!Effect.IncludesShadersStore.mtoonUboDeclaration) {\r\n            Effect.IncludesShadersStore.mtoonUboDeclaration = UboDeclaration;\r\n            Effect.IncludesShadersStore.mtoonVertexDeclaration = VertexDeclaration;\r\n            Effect.IncludesShadersStore.mtoonFragmentDeclaration = FragmentDeclaration;\r\n            Effect.IncludesShadersStore.mtoonFragmentFunctions = FragmentFunctions;\r\n            Effect.IncludesShadersStore.mtoonLightFragment = LightFragment;\r\n            Effect.IncludesShadersStore.mtoonBumpFragment = BumpFragment;\r\n            Effect.ShadersStore.mtoonVertexShader = VertexShader;\r\n            Effect.ShadersStore.mtoonFragmentShader = FragmentShader;\r\n        }\r\n\r\n        // Add properties to Inspactor\r\n        this.inspectableCustomProperties = this.inspectableCustomProperties || [];\r\n        this.inspectableCustomProperties.concat(getInspectableCustomProperties());\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        // if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n        //     return true;\r\n        // }\r\n\r\n        // if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n        //     return true;\r\n        // }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public getClassName() {\r\n        return 'MToonMaterial';\r\n    }\r\n\r\n    /**\r\n     * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\r\n     * You can try switching to logarithmic depth.\r\n     * @see https://doc.babylonjs.com/how_to/using_logarithmic_depth_buffer\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        const newValue = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n        if (this._useLogarithmicDepth !== newValue) {\r\n            this._useLogarithmicDepth = newValue;\r\n            this._markAllSubMeshesAsMiscDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        // return (this.alpha < 1.0) || (this._opacityTexture != null) || this._shouldUseAlphaFromDiffuseTexture() || this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\r\n        return (this.alpha < 1.0) || this._shouldUseAlphaFromDiffuseTexture();\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n        if (this._alphaTest) {\r\n            return true;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    protected _shouldUseAlphaFromDiffuseTexture(): boolean {\r\n        return this._diffuseTexture != null\r\n            && this._diffuseTexture.hasAlpha\r\n            && this._useAlphaFromDiffuseTexture\r\n            && this._transparencyMode !== Material.MATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._diffuseTexture !== null && this._diffuseTexture.hasAlpha); // || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._diffuseTexture;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: boolean = false): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        if (subMesh.effect && this.isFrozen) {\r\n            if (subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new MToonMaterialDefines();\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = subMesh.materialDefines as MToonMaterialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        defines._needNormals = MaterialHelper.PrepareDefinesForLights(\r\n            scene,\r\n            mesh,\r\n            defines,\r\n            this.specularSupported,\r\n            this._maxSimultaneousLights,\r\n            this._disableLighting,\r\n        );\r\n\r\n        if (this.outlineWidthMode !== OutlineWidthMode.None) {\r\n            // Normals is needed when rendering outline\r\n            defines._needNormals = true;\r\n        }\r\n\r\n        this.applyDefines(defines);\r\n\r\n        // Multiview\r\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && (scene as any).useOrderIndependentTransparency;\r\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n\r\n            if (scene.texturesEnabled) {\r\n                // Check texture is ready\r\n                if (!this.isReadyForTexture(this._diffuseTexture, defines, 'DIFFUSE')\r\n                    || !this.isReadyForTexture(this._emissiveTexture, defines, 'EMISSIVE')\r\n                    || !this.isReadyForTexture(this._shadeTexture, defines, 'SHADE')\r\n                    || !this.isReadyForTexture(this._receiveShadowTexture, defines, 'RECEIVE_SHADOW')\r\n                    || !this.isReadyForTexture(this._shadingGradeTexture, defines, 'SHADING_GRADE')\r\n                    || !this.isReadyForTexture(this._rimTexture, defines, 'RIM')\r\n                    || !this.isReadyForTexture(this._matCapTexture, defines, 'MATCAP')\r\n                    || !this.isReadyForTexture(this._outlineWidthTexture, defines, 'OUTLINE_WIDTH')\r\n                    || !this.isReadyForTexture(this._uvAnimationMaskTexture, defines, 'UV_ANIMATION_MASK')\r\n                ) {\r\n                    return false;\r\n                }\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture) {\r\n                    // Bump texure can not be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, 'BUMP');\r\n\r\n                    defines.PARALLAX = this.useParallax;\r\n                    defines.PARALLAXOCCLUSION = this.useParallaxOcclusion;\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this.useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                }\r\n\r\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\r\n            } else {\r\n                defines.DIFFUSE = false;\r\n                defines.EMISSIVE = false;\r\n                defines.SHADE = false;\r\n                defines.RECEIVE_SHADOW = false;\r\n                defines.SHADING_GRADE = false;\r\n                defines.RIM = false;\r\n                defines.MATCAP = false;\r\n                defines.OUTLINE_WIDTH = false;\r\n                defines.BUMP = false;\r\n                defines.UV_ANIMATION_MASK = false;\r\n            }\r\n\r\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\r\n\r\n            // defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\r\n\r\n            // defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\r\n\r\n            // defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            defines.PREMULTIPLYALPHA = (this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF);\r\n\r\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\r\n\r\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n\r\n            // defines.IS_REFLECTION_LINEAR = (this.reflectionTexture != null && !this.reflectionTexture.gammaSpace);\r\n            // defines.IS_REFRACTION_LINEAR = (this.refractionTexture != null && !this.refractionTexture.gammaSpace);\r\n        }\r\n\r\n        // Misc.\r\n        MaterialHelper.PrepareDefinesForMisc(\r\n            mesh,\r\n            scene,\r\n            this._useLogarithmicDepth,\r\n            this.pointsCloud,\r\n            this.fogEnabled,\r\n            this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest,\r\n            defines,\r\n        );\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(\r\n            mesh,\r\n            defines,\r\n            this.useVertexColor,\r\n            this.useBones,\r\n            this.useMorphTargets,\r\n            this.useVertexAlpha,\r\n        );\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(\r\n            scene,\r\n            engine,\r\n            defines,\r\n            useInstances,\r\n            null,\r\n            subMesh.getRenderingMesh().hasThinInstances,\r\n        );\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n\r\n        // Get correct effect\r\n        if (defines.isDirty) {\r\n            const lightDisposed = defines._areLightsDisposed;\r\n            defines.markAsProcessed();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n\r\n            if (defines.BUMP) {\r\n                fallbacks.addFallback(0, 'BUMP');\r\n            }\r\n\r\n            if (defines.PARALLAX) {\r\n                fallbacks.addFallback(1, \"PARALLAX\");\r\n            }\r\n\r\n            if (defines.PARALLAXOCCLUSION) {\r\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\r\n            }\r\n\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, 'FOG');\r\n            }\r\n\r\n            if (defines.POINTSIZE) {\r\n                fallbacks.addFallback(0, 'POINTSIZE');\r\n            }\r\n\r\n            if (defines.LOGARITHMICDEPTH) {\r\n                fallbacks.addFallback(0, 'LOGARITHMICDEPTH');\r\n            }\r\n\r\n            MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\r\n\r\n            if (defines.MULTIVIEW) {\r\n                fallbacks.addFallback(0, 'MULTIVIEW');\r\n            }\r\n\r\n            // Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                if (defines[\"UV\" + i]) {\r\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n                }\r\n            }\r\n\r\n            if (defines.INSTANCESCOLOR) {\r\n                attribs.push(VertexBuffer.ColorInstanceKind);\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n            MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n\r\n            const shaderName = 'mtoon';\r\n\r\n            const uniforms = [\r\n                // StandardMaterial uniforms\r\n                'world', 'view', 'viewProjection', 'vEyePosition', 'vLightsType', 'vAmbientColor', 'visibility',\r\n                'vFogInfos', 'vFogColor', 'pointSize',\r\n                'mBones',\r\n                'vClipPlane', 'vClipPlane2', 'vClipPlane3', 'vClipPlane4', 'vClipPlane5', 'vClipPlane6',\r\n                // \"diffuseLeftColor\", \"diffuseRightColor\", \"opacityParts\", \"reflectionLeftColor\", \"reflectionRightColor\", \"emissiveLeftColor\", \"emissiveRightColor\", \"refractionLeftColor\", \"refractionRightColor\",\r\n                // \"vReflectionPosition\", \"vReflectionSize\", \"vRefractionPosition\", \"vRefractionSize\",\r\n                'logarithmicDepthConstant', 'vTangentSpaceParams', 'alphaCutOff', 'boneTextureWidth',\r\n                'morphTargetTextureInfo', 'morphTargetTextureIndices',\r\n\r\n                // Texture uniforms\r\n                'vDiffuseColor', 'vDiffuseInfos', 'diffuseMatrix',\r\n                'vEmissiveColor', 'vEmissiveInfos', 'emissiveMatrix',\r\n                'vBumpInfos', 'bumpMatrix',\r\n                'vShadeColor', 'vShadeInfos', 'shadeMatrix',\r\n                'vReceiveShadowInfos', 'receiveShadowMatrix',\r\n                'vShadingGradeInfos', 'shadingGradeMatrix',\r\n                'vRimColor', 'vRimInfos', 'RimMatrix',\r\n                'vMatCapInfos', 'MatCapMatrix',\r\n                'vOutlineColor', 'vOutlineWidthInfos', 'outlineWidthMatrix',\r\n\r\n                // MToon uniforms\r\n                'aspect', 'isOutline',\r\n                'shadingGradeRate', 'receiveShadowRate', 'shadeShift', 'shadeToony',\r\n                'rimLightingMix', 'rimFresnelPower', 'rimLift',\r\n                'lightColorAttenuation', 'indirectLightIntensity',\r\n                'outlineWidth', 'outlineScaledMaxDistance', 'outlineLightingMix',\r\n                'uvAnimationScrollX', 'uvAnimationScrollY', 'uvAnimationRotation',\r\n                'vEyeUp', 'time',\r\n            ];\r\n\r\n            const samplers = [\r\n                // StandardMaterial samplers\r\n                'diffuseSampler', 'ambientSampler', 'emissiveSampler', 'bumpSampler', 'boneSampler', 'morphTargets', 'oitDepthSampler', 'oitFrontColorSampler',\r\n\r\n                // MToon samplers\r\n                'shadeSampler', 'receiveShadowSampler', 'shadingGradeSampler',\r\n                'rimSampler', 'matCapSampler', 'outlineWidthSampler',\r\n                'uvAnimationMaskSampler',\r\n            ];\r\n\r\n            const uniformBuffers = ['Material', 'Scene', 'Mesh'];\r\n\r\n            this._eventInfo.fallbacks = fallbacks;\r\n            this._eventInfo.fallbackRank = 0;\r\n            this._eventInfo.defines = defines;\r\n            this._eventInfo.uniforms = uniforms;\r\n            this._eventInfo.samplers = samplers;\r\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n            this._eventInfo.customCode = undefined;\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n            PrePassConfiguration.AddUniforms(uniforms);\r\n            PrePassConfiguration.AddSamplers(samplers);\r\n\r\n            if (ImageProcessingConfiguration) {\r\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n            }\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList({\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers,\r\n                defines,\r\n                maxSimultaneousLights: this._maxSimultaneousLights,\r\n            } as IEffectCreationOptions);\r\n\r\n            const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n            const join = defines.toString();\r\n\r\n            const previousEffect = subMesh.effect;\r\n            let effect = scene.getEngine().createEffect(shaderName, {\r\n                attributes: attribs,\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers,\r\n                defines: join,\r\n                fallbacks,\r\n                onCompiled: this.onCompiled,\r\n                onError: this.onError,\r\n                indexParameters: {\r\n                    maxSimultaneousLights: this._maxSimultaneousLights,\r\n                    maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS,\r\n                },\r\n                processFinalCode: csnrOptions.processFinalCode,\r\n                processCodeAfterIncludes: this._eventInfo.customCode,\r\n                multiTarget: defines.PREPASS,\r\n            } as IEffectCreationOptions, engine);\r\n\r\n            if (effect) {\r\n                if (this._onEffectCreatedObservable) {\r\n                    onCreatedEffectParameters.effect = effect;\r\n                    onCreatedEffectParameters.subMesh = subMesh;\r\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n                }\r\n\r\n                // Use previous effect while new one is compiling\r\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                    effect = previousEffect;\r\n                    defines.markAsUnprocessed();\r\n\r\n                    if (lightDisposed) {\r\n                        // re register in case it takes more than one frame.\r\n                        defines._areLightsDisposed = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    scene.resetCachedMaterial();\r\n                    subMesh.setEffect(effect, defines, this._materialContext);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determine the layout of the UniformBufferObject\r\n     * Must be added in the same order as the `uniform Material` in the shader\r\n     * UBOs can be used to efficiently pass variables to shaders, but only WebGL v2 is supported.\r\n     * babylon.js automatically falls back on WebGL v1\r\n     * The second argument is the number of floats\r\n     */\r\n    public buildUniformLayout(): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        ubo.addUniform('vDiffuseColor', 4);\r\n        ubo.addUniform('vDiffuseInfos', 2);\r\n        ubo.addUniform('diffuseMatrix', 16);\r\n\r\n        ubo.addUniform('vEmissiveColor', 3);\r\n        ubo.addUniform('vEmissiveInfos', 2);\r\n        ubo.addUniform('emissiveMatrix', 16);\r\n\r\n        ubo.addUniform('vBumpInfos', 3);\r\n        ubo.addUniform('bumpMatrix', 16);\r\n\r\n        ubo.addUniform('vShadeColor', 3);\r\n        ubo.addUniform('vShadeInfos', 2);\r\n        ubo.addUniform('shadeMatrix', 16);\r\n\r\n        ubo.addUniform('vReceiveShadowInfos', 2);\r\n        ubo.addUniform('receiveShadowMatrix', 16);\r\n\r\n        ubo.addUniform('vShadingGradeInfos', 2);\r\n        ubo.addUniform('shadingGradeMatrix', 16);\r\n\r\n        ubo.addUniform('vRimColor', 3);\r\n        ubo.addUniform('vRimInfos', 2);\r\n        ubo.addUniform('rimMatrix', 16);\r\n\r\n        ubo.addUniform('vMatCapInfos', 2);\r\n        ubo.addUniform('matCapMatrix', 16);\r\n\r\n        ubo.addUniform('vOutlineColor', 3);\r\n        ubo.addUniform('vOutlineWidthInfos', 2);\r\n        ubo.addUniform('outlineWidthMatrix', 16);\r\n\r\n        ubo.addUniform('vUvAnimationMaskInfos', 2);\r\n        ubo.addUniform('uvAnimationMaskMatrix', 16);\r\n\r\n        ubo.addUniform('vTangentSpaceParams', 2);\r\n        ubo.addUniform('pointSize', 1);\r\n\r\n        ubo.addUniform('shadingGradeRate', 1);\r\n        ubo.addUniform('receiveShadowRate', 1);\r\n        ubo.addUniform('shadeShift', 1);\r\n        ubo.addUniform('shadeToony', 1);\r\n        ubo.addUniform('lightColorAttenuation', 1);\r\n        ubo.addUniform('indirectLightIntensity', 1);\r\n        ubo.addUniform('rimLightingMix', 1);\r\n        ubo.addUniform('rimFresnelPower', 1);\r\n        ubo.addUniform('rimLift', 1);\r\n        ubo.addUniform('outlineWidth', 1);\r\n        ubo.addUniform('outlineScaledMaxDistance', 1);\r\n        ubo.addUniform('outlineLightingMix', 1);\r\n        ubo.addUniform('uvAnimationScrollX', 1);\r\n        ubo.addUniform('uvAnimationScrollY', 1);\r\n        ubo.addUniform('uvAnimationRotation', 1);\r\n\r\n        ubo.addUniform('vEyeUp', 3);\r\n        ubo.addUniform('alphaCutOff', 1);\r\n        ubo.addUniform('vAmbientColor', 3);\r\n        ubo.addUniform('aspect', 1);\r\n        ubo.addUniform('isOutline', 1);\r\n        ubo.addUniform('time', 4);\r\n        ubo.addUniform('visibility', 1);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     * Binds current shader variables\r\n     * This method is called every frame, so even if it is redundant, it prefers speed.\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n        const defines = subMesh.materialDefines as MToonMaterialDefines;\r\n        const effect = subMesh.effect;\r\n        if (!defines || !effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, mesh.visibility);\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\r\n                if (scene.texturesEnabled) {\r\n                    this.bindTexture(this._diffuseTexture, ubo, effect, 'diffuse', 'vDiffuseInfos');\r\n                    this.bindTexture(this._emissiveTexture, ubo, effect, 'emissive', 'vEmissiveInfos');\r\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives) {\r\n                        ubo.updateFloat3(\r\n                            'vBumpInfos',\r\n                            this._bumpTexture.coordinatesIndex,\r\n                            1.0 / this._bumpTexture.level,\r\n                            this._bumpScale,\r\n                        );\r\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n                        effect.setTexture(`bumpSampler`, this._bumpTexture);\r\n                        // bumpTexture は babylon.js のデフォルトと反対の状態である\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2('vTangentSpaceParams', this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2('vTangentSpaceParams', this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n                    this.bindTexture(this._shadeTexture, ubo, effect, 'shade', 'vShadeInfos');\r\n                    this.bindTexture(this._receiveShadowTexture, ubo, effect, 'receiveShadow', 'vReceiveShadowInfos');\r\n                    this.bindTexture(this._shadingGradeTexture, ubo, effect, 'shadingGrade', 'vShadingGradeInfos');\r\n                    this.bindTexture(this._rimTexture, ubo, effect, 'rim', 'vRimInfos');\r\n                    this.bindTexture(this._matCapTexture, ubo, effect, 'matCap', 'vMatCapInfos');\r\n                    this.bindTexture(this._outlineWidthTexture, ubo, effect, 'outlineWidth', 'vOutlineWidthInfos');\r\n                    this.bindTexture(this._uvAnimationMaskTexture, ubo, effect, 'uvAnimationMask', 'vUvAnimationMaskInfos');\r\n\r\n                    if (this._hasAlphaChannel()) {\r\n                        ubo.updateFloat('alphaCutOff', this.alphaCutOff);\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat('pointSize', this.pointSize);\r\n                }\r\n\r\n                // MToon uniforms\r\n                ubo.updateFloat('receiveShadowRate', this._receiveShadowRate);\r\n                ubo.updateFloat('shadingGradeRate', this._shadingGradeRate);\r\n                ubo.updateFloat('shadeShift', this._shadeShift);\r\n                ubo.updateFloat('shadeToony', this._shadeToony);\r\n                ubo.updateFloat('lightColorAttenuation', this._lightColorAttenuation);\r\n                ubo.updateFloat('indirectLightIntensity', this._indirectLightIntensity);\r\n                ubo.updateFloat('rimLightingMix', this._rimLightingMix);\r\n                ubo.updateFloat('rimFresnelPower', this._rimFresnelPower);\r\n                ubo.updateFloat('rimLift', this._rimLift);\r\n                ubo.updateFloat('outlineWidth', this._outlineWidth);\r\n                ubo.updateFloat('outlineScaledMaxDistance', this._outlineScaledMaxDistance);\r\n                ubo.updateFloat('outlineLightingMix', this._outlineLightingMix);\r\n                ubo.updateFloat('uvAnimationScrollX', this._uvAnimationScrollX);\r\n                ubo.updateFloat('uvAnimationScrollY', this._uvAnimationScrollY);\r\n                ubo.updateFloat('uvAnimationRotation', this._uvAnimationRotation);\r\n\r\n                // Colors\r\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\r\n                ubo.updateColor3('vAmbientColor', this._globalAmbientColor);\r\n                ubo.updateColor4('vDiffuseColor', this.diffuseColor, this.alpha);\r\n                ubo.updateColor3('vEmissiveColor', this.emissiveColor);\r\n                ubo.updateColor3('vShadeColor', this.shadeColor);\r\n                ubo.updateColor3('vRimColor', this.rimColor);\r\n                ubo.updateColor4('vOutlineColor', this.outlineColor, 1.0);\r\n                ubo.updateVector3('vEyeUp', scene.activeCamera!.upVector);\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            const anyScene = (scene as any);\r\n            if (anyScene.useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh) && anyScene.depthPeelingRenderer) {\r\n                anyScene.depthPeelingRenderer.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(effect, scene);\r\n\r\n            // Colors\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                MaterialHelper.BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE || mesh.receiveShadows) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            MaterialHelper.BindFogParameters(scene, mesh, effect);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                MaterialHelper.BindMorphTargetParameters(mesh, effect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // Log. depth\r\n            if (this.useLogarithmicDepth) {\r\n                MaterialHelper.BindLogDepth(defines, effect, scene);\r\n            }\r\n\r\n            // image processing\r\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n                this._imageProcessingConfiguration.bind(this._activeEffect);\r\n            }\r\n\r\n            // MToon bindings\r\n            ubo.updateFloat('aspect', scene.getEngine().getAspectRatio(scene.activeCamera!));\r\n            ubo.updateFloat('isOutline', 0.0);\r\n\r\n            // this variable is compatible with [Unity's _Time](https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html)\r\n            const t = window.performance.now() / 1000;\r\n            ubo.updateVector4('time', new Vector4(\r\n                t / 20,\r\n                t,\r\n                t * 2,\r\n                t * 3,\r\n            ));\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results: IAnimatable[] = super.getAnimatables();\r\n        for (const texture of this.appendedActiveTextures) {\r\n            if (texture.animations && texture.animations.length > 0) {\r\n                results.push(texture);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures().concat(this.appendedActiveTextures);\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n        for (const tex of this.appendedActiveTextures) {\r\n            if (tex === texture) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public dispose(\r\n        forceDisposeEffect?: boolean,\r\n        forceDisposeTextures?: boolean,\r\n    ): void {\r\n        delete this.outlineRenderer;\r\n        if (forceDisposeTextures) {\r\n            for (const texture of this.appendedActiveTextures) {\r\n                texture.dispose();\r\n            }\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public clone(name: string): MToonMaterial {\r\n        const result = SerializationHelper.Clone(() => new MToonMaterial(name, this.getScene()), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): MToonMaterial {\r\n        const material = SerializationHelper.Parse(() => new MToonMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * 独自メソッド: テクスチャ情報をバインドする\r\n     * @param texture\r\n     * @param effect\r\n     * @param name\r\n     * @param infoName\r\n     */\r\n    private bindTexture(texture: Nullable<BaseTexture>, ubo: UniformBuffer, effect: Effect, name: string, infoName: string) {\r\n        if (!texture) {\r\n            return;\r\n        }\r\n        this._uniformBuffer.updateFloat2(infoName, texture.coordinatesIndex, texture.level);\r\n        MaterialHelper.BindTextureMatrix(texture, ubo, name);\r\n        effect.setTexture(`${name}Sampler`, texture);\r\n    }\r\n\r\n    /**\r\n     * 独自メソッド: テクスチャの用意が終わっているか確認する\r\n     * @param texture\r\n     * @param defines\r\n     * @param key\r\n     */\r\n    private isReadyForTexture(texture: Nullable<BaseTexture>, defines: any, key: string): boolean {\r\n        if (!texture) {\r\n            defines[key] = false;\r\n            return true;\r\n        }\r\n        if (!texture.isReadyOrNotBlocking()) {\r\n            return false;\r\n        }\r\n        MaterialHelper.PrepareDefinesForMergedUV(texture, defines, key);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 独自メソッド: 定数を設定する\r\n     */\r\n    private applyDefines(defines: any): void {\r\n        switch (this._debugMode) {\r\n            case DebugMode.Normal:\r\n                if (defines.MTOON_DEBUG_NORMAL !== true) {\r\n                    defines.MTOON_DEBUG_NORMAL = true;\r\n                    defines.MTOON_DEBUG_LITSHADERATE = false;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n            case DebugMode.LitShadeRate:\r\n                if (defines.MTOON_DEBUG_LITSHADERATE !== true) {\r\n                    defines.MTOON_DEBUG_NORMAL = false;\r\n                    defines.MTOON_DEBUG_LITSHADERATE = true;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n            case DebugMode.None:\r\n                if (defines.MTOON_DEBUG_NORMAL === true) {\r\n                    defines.MTOON_DEBUG_NORMAL = false;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                if (defines.MTOON_DEBUG_LITSHADERATE === true) {\r\n                    defines.MTOON_DEBUG_LITSHADERATE = false;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n        }\r\n        switch (this.outlineWidthMode) {\r\n            case OutlineWidthMode.WorldCorrdinates:\r\n                if (defines.MTOON_OUTLINE_WIDTH_WORLD !== true) {\r\n                    defines.MTOON_OUTLINE_WIDTH_WORLD = true;\r\n                    defines.MTOON_OUTLINE_WIDTH_SCREEN = false;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n            case OutlineWidthMode.ScreenCoordinates:\r\n                if (defines.MTOON_OUTLINE_WIDTH_SCREEN !== true) {\r\n                    defines.MTOON_OUTLINE_WIDTH_WORLD = false;\r\n                    defines.MTOON_OUTLINE_WIDTH_SCREEN = true;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n            case OutlineWidthMode.None:\r\n                if (defines.MTOON_OUTLINE_WIDTH_SCREEN !== false || defines.MTOON_OUTLINE_WIDTH_WORLD !== false) {\r\n                    defines.MTOON_OUTLINE_WIDTH_SCREEN = false;\r\n                    defines.MTOON_OUTLINE_WIDTH_WORLD = false;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n        }\r\n        switch (this.outlineColorMode) {\r\n            case OutlineColorMode.FixedColor:\r\n                if (defines.MTOON_OUTLINE_COLOR_FIXED !== true) {\r\n                    defines.MTOON_OUTLINE_COLOR_FIXED = true;\r\n                    defines.MTOON_OUTLINE_COLOR_MIXED = false;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n            case OutlineColorMode.MixedLighting:\r\n                if (defines.MTOON_OUTLINE_COLOR_MIXED !== true) {\r\n                    defines.MTOON_OUTLINE_COLOR_FIXED = false;\r\n                    defines.MTOON_OUTLINE_COLOR_MIXED = true;\r\n                    defines.markAsUnprocessed();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { Engine } from '@babylonjs/core/Engines/engine';\r\nimport { Mesh, _InstancesBatch } from '@babylonjs/core/Meshes/mesh';\r\nimport { SubMesh } from '@babylonjs/core/Meshes/subMesh';\r\nimport { Scene } from '@babylonjs/core/scene';\r\nimport { ISceneComponent, SceneComponentConstants } from '@babylonjs/core/sceneComponent';\r\nimport { Nullable } from '@babylonjs/core/types';\r\nimport { Matrix } from '@babylonjs/core/Maths/math';\r\nimport { MToonMaterial } from './mtoon-material';\r\nimport { Constants } from '@babylonjs/core/Engines/constants';\r\nimport { Material } from '@babylonjs/core/Materials/material';\r\n\r\nconst BASE_NAME = 'MToonOutline';\r\n\r\n/**\r\n * MToon outline renderer\r\n * @see OutlineRenderer\r\n */\r\nexport class MToonOutlineRenderer implements ISceneComponent {\r\n    /**\r\n     * Stencil value used to avoid outline being seen within the mesh when the mesh is transparent\r\n     */\r\n    private static _StencilReference = 0x04;\r\n\r\n    public static rendererId = 0;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public readonly name: string;\r\n\r\n    /**\r\n     * Defines a zOffset default Factor to prevent zFighting between the overlay and the mesh.\r\n     */\r\n    public zOffset = 1;\r\n\r\n     /**\r\n      * Defines a zOffset default Unit to prevent zFighting between the overlay and the mesh.\r\n      */\r\n    public zOffsetUnits = 4; // 4 to account for projection a bit by default\r\n\r\n    private _engine: Engine;\r\n    private _savedDepthWrite = false;\r\n    private _passIdForDrawWrapper: number[];\r\n\r\n    /**\r\n     * @inheritdoc\r\n     * MToonMaterial ごとにインスタンスを生成する\r\n     */\r\n    public constructor(\r\n        public readonly scene: Scene,\r\n        public readonly material: MToonMaterial,\r\n    ) {\r\n        this.name = `${BASE_NAME}_${material.name}_${MToonOutlineRenderer.rendererId++}`;\r\n        this.scene._addComponent(this);\r\n        this._engine = this.scene.getEngine();\r\n        this._passIdForDrawWrapper = [];\r\n        for (let i = 0; i < 4; ++i) {\r\n            this._passIdForDrawWrapper[i] = this._engine.createRenderPassId(`Outline Renderer (${i})`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     * シーン描画前後にレンダリング処理を登録する\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeRenderingMeshStage.registerStep(\r\n            SceneComponentConstants.STEP_BEFORERENDERINGMESH_OUTLINE,\r\n            this,\r\n            this._beforeRenderingMesh,\r\n        );\r\n        this.scene._afterRenderingMeshStage.registerStep(\r\n            SceneComponentConstants.STEP_AFTERRENDERINGMESH_OUTLINE,\r\n            this,\r\n            this._afterRenderingMesh,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here.\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public dispose(): void {\r\n        for (let i = 0; i < this._passIdForDrawWrapper.length; ++i) {\r\n            this._engine.releaseRenderPassId(this._passIdForDrawWrapper[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the outline in the canvas.\r\n     * @param subMesh Defines the sumesh to render\r\n     * @param batch Defines the batch of meshes in case of instances\r\n     * @param useOverlay Defines if the rendering is for the overlay or the outline\r\n     * @param renderPassId Render pass id to use to render the mesh\r\n     */\r\n    private render(subMesh: SubMesh, batch: _InstancesBatch, useOverlay: boolean = false, renderPassId?: number): void {\r\n        renderPassId = renderPassId ?? this._passIdForDrawWrapper[0];\r\n        const scene = this.scene;\r\n        const effect = subMesh.effect;\r\n        if (!effect || !effect.isReady() || !this.scene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        const drawWrapper = subMesh._getDrawWrapper(renderPassId, true);\r\n        if (!drawWrapper) {\r\n            return;\r\n        }\r\n        drawWrapper.setEffect(effect);\r\n        if (!drawWrapper.effect || !drawWrapper.effect.isReady()) {\r\n            return;\r\n        }\r\n\r\n        const ownerMesh = subMesh.getMesh();\r\n        const replacementMesh = ownerMesh._internalAbstractMeshDataInfo._actAsRegularMesh ? ownerMesh : null;\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const effectiveMesh = replacementMesh ? replacementMesh : renderingMesh;\r\n\r\n        if (!scene.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        this.material.applyOutlineCullMode();\r\n        this._engine.enableEffect(drawWrapper);\r\n        if (!this.isHardwareInstancedRendering(subMesh, batch)) {\r\n            renderingMesh._bind(subMesh, effect, this.material.fillMode);\r\n        }\r\n\r\n        this._engine.setZOffset(-this.zOffset);\r\n        this._engine.setZOffsetUnits(-this.zOffsetUnits);\r\n\r\n        renderingMesh._processRendering(\r\n            effectiveMesh,\r\n            subMesh,\r\n            effect,\r\n            this.material.fillMode,\r\n            batch,\r\n            this.isHardwareInstancedRendering(subMesh, batch),\r\n            (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => {\r\n                if (effectiveMaterial) {\r\n                    effectiveMaterial.bindForSubMesh(world, effectiveMesh as Mesh, subMesh);\r\n                }\r\n                effect.setMatrix('world', world);\r\n                effect.setFloat('isOutline', 1.0);\r\n            },\r\n            this.material,\r\n        );\r\n\r\n        this._engine.setZOffset(0);\r\n        this._engine.setZOffsetUnits(0);\r\n        this.material.restoreOutlineCullMode();\r\n    }\r\n\r\n    /**\r\n     * このメッシュを描画する前に実行されるコールバック\r\n     */\r\n    private _beforeRenderingMesh(mesh: Mesh, subMesh: SubMesh, batch: _InstancesBatch): void {\r\n        this._savedDepthWrite = this._engine.getDepthWrite();\r\n\r\n        if (!this.willRender(subMesh)) {\r\n            return;\r\n        }\r\n        const material = subMesh.getMaterial() as MToonMaterial;\r\n        if (material.needAlphaBlendingForMesh(mesh)) {\r\n            this._engine.cacheStencilState();\r\n            // Draw only to stencil buffer for the original mesh\r\n            // The resulting stencil buffer will be used so the outline is not visible inside the mesh when the mesh is transparent\r\n            this._engine.setDepthWrite(false);\r\n            this._engine.setColorWrite(false);\r\n            this._engine.setStencilBuffer(true);\r\n            this._engine.setStencilOperationPass(Constants.REPLACE);\r\n            this._engine.setStencilFunction(Constants.ALWAYS);\r\n            this._engine.setStencilMask(MToonOutlineRenderer._StencilReference);\r\n            this._engine.setStencilFunctionReference(MToonOutlineRenderer._StencilReference);\r\n            this._engine.stencilStateComposer.useStencilGlobalOnly = true;\r\n            this.render(subMesh, batch, /* This sets offset to 0 */ true, this._passIdForDrawWrapper[1]);\r\n\r\n            this._engine.setColorWrite(true);\r\n            this._engine.setStencilFunction(Constants.NOTEQUAL);\r\n        }\r\n\r\n        // Draw the outline using the above stencil if needed to avoid drawing within the mesh\r\n        this._engine.setDepthWrite(false);\r\n        this.render(subMesh, batch, false, this._passIdForDrawWrapper[0]);\r\n        this._engine.setDepthWrite(this._savedDepthWrite);\r\n\r\n        if (material && material.needAlphaBlendingForMesh(mesh)) {\r\n            this._engine.stencilStateComposer.useStencilGlobalOnly = false;\r\n            this._engine.restoreStencilState();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * このメッシュを描画した後に実行されるコールバック\r\n     */\r\n    private _afterRenderingMesh(mesh: Mesh, subMesh: SubMesh, batch: _InstancesBatch): void {\r\n        if (!this.willRender(subMesh)) {\r\n            return;\r\n        }\r\n\r\n        if (this._savedDepthWrite) {\r\n            // 深度アリで再度書き込む\r\n            this._engine.setDepthWrite(true);\r\n            this._engine.setColorWrite(false);\r\n            this.render(subMesh, batch, false, this._passIdForDrawWrapper[2]);\r\n            this._engine.setColorWrite(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * インスタンシングを行うかどうか\r\n     */\r\n    private isHardwareInstancedRendering(subMesh: SubMesh, batch: _InstancesBatch): boolean {\r\n        if (!this._engine.getCaps().instancedArrays) {\r\n            return false;\r\n        }\r\n        if (batch.visibleInstances[subMesh._id] === null) {\r\n            return false;\r\n        }\r\n        if (typeof batch.visibleInstances[subMesh._id] === 'undefined') {\r\n            return false;\r\n        }\r\n\r\n        return subMesh.getRenderingMesh().hasThinInstances;\r\n    }\r\n\r\n     /**\r\n     * このメッシュでアウトラインを描画するかどうか\r\n     */\r\n    private willRender(subMesh: SubMesh): boolean {\r\n        const material = subMesh.getMaterial() as Nullable<MToonMaterial>;\r\n\r\n        if (!material || material.getClassName() !== 'MToonMaterial' || material.getOutlineRendererName() !== this.name) {\r\n            // このコンポーネントの Material ではない\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","export default \"// replace vBumpUV to mainUv\\nvec2 uvOffset = vec2(0.0, 0.0);\\n\\n#if defined(BUMP) || defined(PARALLAX) || defined(DETAIL)\\n    #ifdef NORMALXYSCALE\\n        float normalScale = 1.0;\\n    #elif defined(BUMP)\\n        float normalScale = vBumpInfos.y;\\n    #else\\n        float normalScale = 1.0;\\n    #endif\\n\\n    #if defined(TANGENT) && defined(NORMAL)\\n        mat3 TBN = vTBN;\\n    #elif defined(BUMP)\\n        // vec2 TBNUV = gl_FrontFacing ? vBumpUV : -vBumpUV;\\n        vec2 TBNUV = gl_FrontFacing ? mainUv : -mainUv;\\n        mat3 TBN = cotangent_frame(normalW * normalScale, vPositionW, TBNUV, vTangentSpaceParams);\\n    #else\\n        vec2 TBNUV = gl_FrontFacing ? vDetailUV : -vDetailUV;\\n        mat3 TBN = cotangent_frame(normalW * normalScale, vPositionW, TBNUV, vec2(1., 1.));\\n    #endif\\n#elif defined(ANISOTROPIC)\\n    #if defined(TANGENT) && defined(NORMAL)\\n        mat3 TBN = vTBN;\\n    #else\\n        // flip the uv for the backface\\n        vec2 TBNUV = gl_FrontFacing ? vMainUV1 : -vMainUV1;\\n        mat3 TBN = cotangent_frame(normalW, vPositionW, TBNUV, vec2(1., 1.));\\n    #endif\\n#endif\\n\\n#ifdef PARALLAX\\n    mat3 invTBN = transposeMat3(TBN);\\n\\n    #ifdef PARALLAXOCCLUSION\\n        // uvOffset = parallaxOcclusion(invTBN * -viewDirectionW, invTBN * normalW, vBumpUV, vBumpInfos.z);\\n        uvOffset = parallaxOcclusion(invTBN * -viewDirectionW, invTBN * normalW, mainUv, vBumpInfos.z);\\n    #else\\n        uvOffset = parallaxOffset(invTBN * viewDirectionW, vBumpInfos.z);\\n    #endif\\n#endif\\n\\n#ifdef DETAIL\\n    vec4 detailColor = texture2D(detailSampler, vDetailUV + uvOffset);\\n    vec2 detailNormalRG = detailColor.wy * 2.0 - 1.0;\\n    float detailNormalB = sqrt(1. - saturate(dot(detailNormalRG, detailNormalRG)));\\n    vec3 detailNormal = vec3(detailNormalRG, detailNormalB);\\n#endif\\n\\n#ifdef BUMP\\n    #ifdef OBJECTSPACE_NORMALMAP\\n        // normalW = normalize(texture2D(bumpSampler, vBumpUV).xyz  * 2.0 - 1.0);\\n        normalW = normalize(texture2D(bumpSampler, mainUv).xyz  * 2.0 - 1.0);\\n        normalW = normalize(mat3(normalMatrix) * normalW);\\n    #elif !defined(DETAIL)\\n        // normalW = perturbNormal(TBN, texture2D(bumpSampler, vBumpUV + uvOffset).xyz, vBumpInfos.y);\\n        normalW = perturbNormal(TBN, texture2D(bumpSampler, mainUv + uvOffset).xyz, vBumpInfos.y);\\n    #else\\n        // vec3 bumpNormal = texture2D(bumpSampler, vBumpUV + uvOffset).xyz * 2.0 - 1.0;\\n        vec3 bumpNormal = texture2D(bumpSampler, mainUv + uvOffset).xyz * 2.0 - 1.0;\\n        // Reference for normal blending: https://blog.selfshadow.com/publications/blending-in-detail/\\n        #if DETAIL_NORMALBLENDMETHOD == 0 // whiteout\\n            detailNormal.xy *= vDetailInfos.z;\\n            vec3 blendedNormal = normalize(vec3(bumpNormal.xy + detailNormal.xy, bumpNormal.z * detailNormal.z));\\n        #elif DETAIL_NORMALBLENDMETHOD == 1 // RNM\\n            detailNormal.xy *= vDetailInfos.z;\\n            bumpNormal += vec3(0.0, 0.0, 1.0);\\n            detailNormal *= vec3(-1.0, -1.0, 1.0);\\n            vec3 blendedNormal = bumpNormal * dot(bumpNormal, detailNormal) / bumpNormal.z - detailNormal;\\n        #endif\\n        normalW = perturbNormalBase(TBN, blendedNormal, vBumpInfos.y);\\n    #endif\\n#elif defined(DETAIL)\\n        detailNormal.xy *= vDetailInfos.z;\\n        normalW = perturbNormalBase(TBN, detailNormal, vDetailInfos.z);\\n#endif\\n\";","export default \"uniform vec4 vEyePosition;\\n\\n// Colors\\nuniform vec4 vDiffuseColor;\\nuniform vec3 vEmissiveColor;\\nuniform vec3 vShadeColor;\\nuniform vec3 vRimColor;\\nuniform vec4 vOutlineColor;\\nuniform vec3 vAmbientColor;\\n\\nuniform vec3 vEyeUp;\\nuniform float aspect;\\nuniform float alphaCutOff;\\nuniform float visibility;\\nuniform float isOutline;\\nuniform vec4 time;\\n\\n// Samplers\\n#ifdef DIFFUSE\\nuniform vec2 vDiffuseInfos;\\n#endif\\n\\n#ifdef EMISSIVE\\nuniform vec2 vEmissiveInfos;\\n#endif\\n\\n#ifdef BUMP\\nuniform vec3 vBumpInfos;\\nuniform vec2 vTangentSpaceParams;\\n#endif\\n\\n#ifdef SHADE\\nuniform vec2 vShadeInfos;\\n#endif\\n\\n#ifdef RECEIVE_SHADOW\\nuniform vec2 vReceiveShadowInfos;\\n#endif\\n\\n#ifdef SHADING_GRADE\\nuniform vec2 vShadingGradeInfos;\\n#endif\\n\\n#ifdef RIM\\nuniform vec2 vRimInfos;\\n#endif\\n\\n#ifdef MATCAP\\nuniform vec2 vMatCapInfos;\\n#endif\\n\\n#ifdef OUTLINE_WIDTH\\nuniform vec2 vOutlineWidthInfos;\\n#endif\\n\\n#ifdef UV_ANIMATION_MASK\\nuniform vec2 vUvAnimationMaskInfos;\\n#endif\\n\\n// MToon params\\nuniform float shadingGradeRate;\\nuniform float receiveShadowRate;\\nuniform float shadeShift;\\nuniform float shadeToony;\\nuniform float lightColorAttenuation;\\nuniform float indirectLightIntensity;\\nuniform float rimLightingMix;\\nuniform float rimFresnelPower;\\nuniform float rimLift;\\nuniform float outlineWidth;\\nuniform float outlineScaledMaxDistance;\\nuniform float outlineLightingMix;\\nuniform float uvAnimationScrollX;\\nuniform float uvAnimationScrollY;\\nuniform float uvAnimationRotation;\\n\";","export default \"#ifdef LIGHT{X}\\n    #if defined(SHADOWONLY) || defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X}) && defined(LIGHTMAPNOSPECULAR{X})\\n        //No light calculation\\n    #else\\n        #ifdef PBR\\n            // Compute Pre Lighting infos\\n            #ifdef SPOTLIGHT{X}\\n                preInfo = computePointAndSpotPreLightingInfo(light{X}.vLightData, viewDirectionW, normalW);\\n            #elif defined(POINTLIGHT{X})\\n                preInfo = computePointAndSpotPreLightingInfo(light{X}.vLightData, viewDirectionW, normalW);\\n            #elif defined(HEMILIGHT{X})\\n                preInfo = computeHemisphericPreLightingInfo(light{X}.vLightData, viewDirectionW, normalW);\\n            #elif defined(DIRLIGHT{X})\\n                preInfo = computeDirectionalPreLightingInfo(light{X}.vLightData, viewDirectionW, normalW);\\n            #endif\\n\\n            preInfo.NdotV = NdotV;\\n\\n            // Compute Attenuation infos\\n            #ifdef SPOTLIGHT{X}\\n                #ifdef LIGHT_FALLOFF_GLTF{X}\\n                    preInfo.attenuation = computeDistanceLightFalloff_GLTF(preInfo.lightDistanceSquared, light{X}.vLightFalloff.y);\\n                    preInfo.attenuation *= computeDirectionalLightFalloff_GLTF(light{X}.vLightDirection.xyz, preInfo.L, light{X}.vLightFalloff.z, light{X}.vLightFalloff.w);\\n                #elif defined(LIGHT_FALLOFF_PHYSICAL{X})\\n                    preInfo.attenuation = computeDistanceLightFalloff_Physical(preInfo.lightDistanceSquared);\\n                    preInfo.attenuation *= computeDirectionalLightFalloff_Physical(light{X}.vLightDirection.xyz, preInfo.L, light{X}.vLightDirection.w);\\n                #elif defined(LIGHT_FALLOFF_STANDARD{X})\\n                    preInfo.attenuation = computeDistanceLightFalloff_Standard(preInfo.lightOffset, light{X}.vLightFalloff.x);\\n                    preInfo.attenuation *= computeDirectionalLightFalloff_Standard(light{X}.vLightDirection.xyz, preInfo.L, light{X}.vLightDirection.w, light{X}.vLightData.w);\\n                #else\\n                    preInfo.attenuation = computeDistanceLightFalloff(preInfo.lightOffset, preInfo.lightDistanceSquared, light{X}.vLightFalloff.x, light{X}.vLightFalloff.y);\\n                    preInfo.attenuation *= computeDirectionalLightFalloff(light{X}.vLightDirection.xyz, preInfo.L, light{X}.vLightDirection.w, light{X}.vLightData.w, light{X}.vLightFalloff.z, light{X}.vLightFalloff.w);\\n                #endif\\n            #elif defined(POINTLIGHT{X})\\n                #ifdef LIGHT_FALLOFF_GLTF{X}\\n                    preInfo.attenuation = computeDistanceLightFalloff_GLTF(preInfo.lightDistanceSquared, light{X}.vLightFalloff.y);\\n                #elif defined(LIGHT_FALLOFF_PHYSICAL{X})\\n                    preInfo.attenuation = computeDistanceLightFalloff_Physical(preInfo.lightDistanceSquared);\\n                #elif defined(LIGHT_FALLOFF_STANDARD{X})\\n                    preInfo.attenuation = computeDistanceLightFalloff_Standard(preInfo.lightOffset, light{X}.vLightFalloff.x);\\n                #else\\n                    preInfo.attenuation = computeDistanceLightFalloff(preInfo.lightOffset, preInfo.lightDistanceSquared, light{X}.vLightFalloff.x, light{X}.vLightFalloff.y);\\n                #endif\\n            #else\\n                preInfo.attenuation = 1.0;\\n            #endif\\n\\n            // Simulates Light radius for diffuse and spec term\\n            // clear coat is using a dedicated roughness\\n            #ifdef HEMILIGHT{X}\\n                preInfo.roughness = roughness;\\n            #else\\n                preInfo.roughness = adjustRoughnessFromLightProperties(roughness, light{X}.vLightSpecular.a, preInfo.lightDistance);\\n            #endif\\n\\n            // Diffuse contribution\\n            #ifdef HEMILIGHT{X}\\n                info.diffuse = computeHemisphericDiffuseLighting(preInfo, light{X}.vLightDiffuse.rgb, light{X}.vLightGround);\\n            #elif defined(SS_TRANSLUCENCY)\\n                info.diffuse = computeDiffuseAndTransmittedLighting(preInfo, light{X}.vLightDiffuse.rgb, subSurfaceOut.transmittance);\\n            #else\\n                info.diffuse = computeDiffuseLighting(preInfo, light{X}.vLightDiffuse.rgb);\\n            #endif\\n\\n            // Specular contribution\\n            #ifdef SPECULARTERM\\n                #ifdef ANISOTROPIC\\n                    info.specular = computeAnisotropicSpecularLighting(preInfo, viewDirectionW, normalW, anisotropicOut.anisotropicTangent, anisotropicOut.anisotropicBitangent, anisotropicOut.anisotropy, clearcoatOut.specularEnvironmentR0, specularEnvironmentR90, AARoughnessFactors.x, light{X}.vLightDiffuse.rgb);\\n                #else\\n                    info.specular = computeSpecularLighting(preInfo, normalW, clearcoatOut.specularEnvironmentR0, specularEnvironmentR90, AARoughnessFactors.x, light{X}.vLightDiffuse.rgb);\\n                #endif\\n            #endif\\n\\n            // Sheen contribution\\n            #ifdef SHEEN\\n                #ifdef SHEEN_LINKWITHALBEDO\\n                    // BE Carefull: Sheen intensity is replacing the roughness value.\\n                    preInfo.roughness = sheenOut.sheenIntensity;\\n                #else\\n                    #ifdef HEMILIGHT{X}\\n                        preInfo.roughness = sheenOut.sheenRoughness;\\n                    #else\\n                        preInfo.roughness = adjustRoughnessFromLightProperties(sheenOut.sheenRoughness, light{X}.vLightSpecular.a, preInfo.lightDistance);\\n                    #endif\\n                #endif\\n                info.sheen = computeSheenLighting(preInfo, normalW, sheenOut.sheenColor, specularEnvironmentR90, AARoughnessFactors.x, light{X}.vLightDiffuse.rgb);\\n            #endif\\n\\n            // Clear Coat contribution\\n            #ifdef CLEARCOAT\\n                // Simulates Light radius\\n                #ifdef HEMILIGHT{X}\\n                    preInfo.roughness = clearcoatOut.clearCoatRoughness;\\n                #else\\n                    preInfo.roughness = adjustRoughnessFromLightProperties(clearcoatOut.clearCoatRoughness, light{X}.vLightSpecular.a, preInfo.lightDistance);\\n                #endif\\n\\n                info.clearCoat = computeClearCoatLighting(preInfo, clearcoatOut.clearCoatNormalW, clearcoatOut.clearCoatAARoughnessFactors.x, clearcoatOut.clearCoatIntensity, light{X}.vLightDiffuse.rgb);\\n\\n                #ifdef CLEARCOAT_TINT\\n                    // Absorption\\n                    absorption = computeClearCoatLightingAbsorption(clearcoatOut.clearCoatNdotVRefract, preInfo.L, clearcoatOut.clearCoatNormalW, clearcoatOut.clearCoatColor, clearcoatOut.clearCoatThickness, clearcoatOut.clearCoatIntensity);\\n                    info.diffuse *= absorption;\\n                    #ifdef SPECULARTERM\\n                        info.specular *= absorption;\\n                    #endif\\n                #endif\\n\\n                // Apply energy conservation on diffuse and specular term.\\n                info.diffuse *= info.clearCoat.w;\\n                #ifdef SPECULARTERM\\n                    info.specular *= info.clearCoat.w;\\n                #endif\\n                #ifdef SHEEN\\n                    info.sheen *= info.clearCoat.w;\\n                #endif\\n            #endif\\n        #else\\n            #ifdef SPOTLIGHT{X}\\n                info = computeSpotLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDirection, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular.rgb, light{X}.vLightDiffuse.a, glossiness);\\n            #elif defined(HEMILIGHT{X})\\n                info = computeHemisphericLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular.rgb, light{X}.vLightGround, glossiness);\\n            #elif defined(POINTLIGHT{X}) || defined(DIRLIGHT{X})\\n                info = computeLighting(viewDirectionW, normalW, light{X}.vLightData, light{X}.vLightDiffuse.rgb, light{X}.vLightSpecular.rgb, light{X}.vLightDiffuse.a, glossiness);\\n            #endif\\n        #endif\\n\\n        #ifdef PROJECTEDLIGHTTEXTURE{X}\\n            info.diffuse *= computeProjectionTextureDiffuseLighting(projectionLightSampler{X}, textureProjectionMatrix{X});\\n        #endif\\n    #endif\\n\\n    #ifdef SHADOW{X}\\n        #ifdef SHADOWCSM{X}\\n            for (int i = 0; i < SHADOWCSMNUM_CASCADES{X}; i++)\\n            {\\n                #ifdef SHADOWCSM_RIGHTHANDED{X}\\n                    diff{X} = viewFrustumZ{X}[i] + vPositionFromCamera{X}.z;\\n                #else\\n                    diff{X} = viewFrustumZ{X}[i] - vPositionFromCamera{X}.z;\\n                #endif\\n                if (diff{X} >= 0.) {\\n                    index{X} = i;\\n                    break;\\n                }\\n            }\\n\\n            #ifdef SHADOWCSMUSESHADOWMAXZ{X}\\n            if (index{X} >= 0)\\n            #endif\\n            {\\n                #if defined(SHADOWPCF{X})\\n                    #if defined(SHADOWLOWQUALITY{X})\\n                        shadow = computeShadowWithCSMPCF1(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                    #elif defined(SHADOWMEDIUMQUALITY{X})\\n                        shadow = computeShadowWithCSMPCF3(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                    #else\\n                        shadow = computeShadowWithCSMPCF5(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                    #endif\\n                #elif defined(SHADOWPCSS{X})\\n                    #if defined(SHADOWLOWQUALITY{X})\\n                        shadow = computeShadowWithCSMPCSS16(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w, lightSizeUVCorrection{X}[index{X}], depthCorrection{X}[index{X}], penumbraDarkness{X});\\n                    #elif defined(SHADOWMEDIUMQUALITY{X})\\n                        shadow = computeShadowWithCSMPCSS32(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w, lightSizeUVCorrection{X}[index{X}], depthCorrection{X}[index{X}], penumbraDarkness{X});\\n                    #else\\n                        shadow = computeShadowWithCSMPCSS64(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w, lightSizeUVCorrection{X}[index{X}], depthCorrection{X}[index{X}], penumbraDarkness{X});\\n                    #endif\\n                #else\\n                    shadow = computeShadowCSM(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                #endif\\n\\n                #ifdef SHADOWCSMDEBUG{X}\\n                    shadowDebug{X} = vec3(shadow) * vCascadeColorsMultiplier{X}[index{X}];\\n                #endif\\n\\n                #ifndef SHADOWCSMNOBLEND{X}\\n                    float frustumLength = frustumLengths{X}[index{X}];\\n                    float diffRatio = clamp(diff{X} / frustumLength, 0., 1.) * cascadeBlendFactor{X};\\n                    if (index{X} < (SHADOWCSMNUM_CASCADES{X} - 1) && diffRatio < 1.)\\n                    {\\n                        index{X} += 1;\\n                        float nextShadow = 0.;\\n                        #if defined(SHADOWPCF{X})\\n                            #if defined(SHADOWLOWQUALITY{X})\\n                                nextShadow = computeShadowWithCSMPCF1(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                            #elif defined(SHADOWMEDIUMQUALITY{X})\\n                                nextShadow = computeShadowWithCSMPCF3(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                            #else\\n                                nextShadow = computeShadowWithCSMPCF5(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                            #endif\\n                        #elif defined(SHADOWPCSS{X})\\n                            #if defined(SHADOWLOWQUALITY{X})\\n                                nextShadow = computeShadowWithCSMPCSS16(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w, lightSizeUVCorrection{X}[index{X}], depthCorrection{X}[index{X}], penumbraDarkness{X});\\n                            #elif defined(SHADOWMEDIUMQUALITY{X})\\n                                nextShadow = computeShadowWithCSMPCSS32(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w, lightSizeUVCorrection{X}[index{X}], depthCorrection{X}[index{X}], penumbraDarkness{X});\\n                            #else\\n                                nextShadow = computeShadowWithCSMPCSS64(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w, lightSizeUVCorrection{X}[index{X}], depthCorrection{X}[index{X}], penumbraDarkness{X});\\n                            #endif\\n                        #else\\n                            nextShadow = computeShadowCSM(float(index{X}), vPositionFromLight{X}[index{X}], vDepthMetric{X}[index{X}], shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n                        #endif\\n\\n                        shadow = mix(nextShadow, shadow, diffRatio);\\n                        #ifdef SHADOWCSMDEBUG{X}\\n                            shadowDebug{X} = mix(vec3(nextShadow) * vCascadeColorsMultiplier{X}[index{X}], shadowDebug{X}, diffRatio);\\n                        #endif\\n                    }\\n                #endif\\n            }\\n        #elif defined(SHADOWCLOSEESM{X})\\n            #if defined(SHADOWCUBE{X})\\n                shadow = computeShadowWithCloseESMCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.depthValues);\\n            #else\\n                shadow = computeShadowWithCloseESM(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.shadowsInfo.w);\\n            #endif\\n        #elif defined(SHADOWESM{X})\\n            #if defined(SHADOWCUBE{X})\\n                shadow = computeShadowWithESMCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.depthValues);\\n            #else\\n                shadow = computeShadowWithESM(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.z, light{X}.shadowsInfo.w);\\n            #endif\\n        #elif defined(SHADOWPOISSON{X})\\n            #if defined(SHADOWCUBE{X})\\n                shadow = computeShadowWithPoissonSamplingCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.x, light{X}.depthValues);\\n            #else\\n                shadow = computeShadowWithPoissonSampling(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #endif\\n        #elif defined(SHADOWPCF{X})\\n            #if defined(SHADOWLOWQUALITY{X})\\n                shadow = computeShadowWithPCF1(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #elif defined(SHADOWMEDIUMQUALITY{X})\\n                shadow = computeShadowWithPCF3(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #else\\n                shadow = computeShadowWithPCF5(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.yz, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #endif\\n        #elif defined(SHADOWPCSS{X})\\n            #if defined(SHADOWLOWQUALITY{X})\\n                shadow = computeShadowWithPCSS16(vPositionFromLight{X}, vDepthMetric{X}, depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #elif defined(SHADOWMEDIUMQUALITY{X})\\n                shadow = computeShadowWithPCSS32(vPositionFromLight{X}, vDepthMetric{X}, depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #else\\n                shadow = computeShadowWithPCSS64(vPositionFromLight{X}, vDepthMetric{X}, depthSampler{X}, shadowSampler{X}, light{X}.shadowsInfo.y, light{X}.shadowsInfo.z, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #endif\\n        #else\\n            #if defined(SHADOWCUBE{X})\\n                shadow = computeShadowCube(light{X}.vLightData.xyz, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.depthValues);\\n            #else\\n                shadow = computeShadow(vPositionFromLight{X}, vDepthMetric{X}, shadowSampler{X}, light{X}.shadowsInfo.x, light{X}.shadowsInfo.w);\\n            #endif\\n        #endif\\n\\n        #ifdef SHADOWONLY\\n            #ifndef SHADOWINUSE\\n                #define SHADOWINUSE\\n            #endif\\n            globalShadow += shadow;\\n            shadowLightCount += 1.0;\\n        #endif\\n    #else\\n        shadow = 1.;\\n    #endif\\n\\n    #ifndef SHADOWONLY\\n        #ifdef CUSTOMUSERLIGHTING\\n            // Compute and reflect MToon lighting\\n            #ifdef SPOTLIGHT{X}\\n                lightDirection = computeSpotLightDirection(light{X}.vLightData);\\n            #elif defined(HEMILIGHT{X})\\n                lightDirection = computeHemisphericLightDirection(light{X}.vLightData, normalW.xyz);\\n            #elif defined(POINTLIGHT{X}) || defined(DIRLIGHT{X})\\n                lightDirection = computeLightDirection(light{X}.vLightData);\\n            #endif\\n            mtoonDiffuse = computeMToonDiffuseLighting(viewDirectionW.xyz, normalW.xyz, mainUv, lightDirection, light{X}.vLightDiffuse.rgba, shadow);\\n            diffuseBase += mtoonDiffuse.rgb;\\n            alpha = min(alpha, mtoonDiffuse.a);\\n            #if defined(ALPHATEST) && ALPHATEST\\n                alpha = (alpha - alphaCutOff) / max(fwidth(alpha), EPS_COL) + 0.5; // Alpha to Coverage\\n                if (alpha < alphaCutOff) {\\n                    discard;\\n                }\\n                alpha = 1.0; // Discarded, otherwise it should be assumed to have full opacity\\n            #else\\n                if (alpha - 0.0001 < 0.000) { // Slightly improves rendering with layered transparency\\n                    discard;\\n                }\\n            #endif\\n        #elif defined(LIGHTMAP) && defined(LIGHTMAPEXCLUDED{X})\\n            diffuseBase += lightmapColor.rgb * shadow;\\n            #ifdef SPECULARTERM\\n                #ifndef LIGHTMAPNOSPECULAR{X}\\n                    specularBase += info.specular * shadow * lightmapColor.rgb;\\n                #endif\\n            #endif\\n            #ifdef CLEARCOAT\\n                #ifndef LIGHTMAPNOSPECULAR{X}\\n                    clearCoatBase += info.clearCoat.rgb * shadow * lightmapColor.rgb;\\n                #endif\\n            #endif\\n            #ifdef SHEEN\\n                #ifndef LIGHTMAPNOSPECULAR{X}\\n                    sheenBase += info.sheen.rgb * shadow;\\n                #endif\\n            #endif\\n        #else\\n            #ifdef SHADOWCSMDEBUG{X}\\n                diffuseBase += info.diffuse * shadowDebug{X};\\n            #else\\n                diffuseBase += info.diffuse * shadow;\\n            #endif\\n            #ifdef SPECULARTERM\\n                specularBase += info.specular * shadow;\\n            #endif\\n            #ifdef CLEARCOAT\\n                clearCoatBase += info.clearCoat.rgb * shadow;\\n            #endif\\n            #ifdef SHEEN\\n                sheenBase += info.sheen.rgb * shadow;\\n            #endif\\n        #endif\\n    #endif\\n#endif\\n\";","export default \"\\n/**\\n* Compute Directional or Point light direction\\n*/\\nvec3 computeLightDirection(vec4 lightData) {\\n      return normalize(mix(lightData.xyz - vPositionW, -lightData.xyz, lightData.w));\\n}\\n\\n/**\\n* Compute Spot Light direction\\n*/\\nvec3 computeSpotLightDirection(vec4 lightData) {\\n     return normalize(lightData.xyz - vPositionW);\\n}\\n\\n/**\\n* Compute Hemispheric light direction\\n*/\\nvec3 computeHemisphericLightDirection(vec4 lightData, vec3 vNormal) {\\n     return normalize(lightData.xyz);\\n}\\n\\n/**\\n* Compute MToon diffuse lighting\\n*/\\nvec4 computeMToonDiffuseLighting(vec3 worldView, vec3 worldNormal, vec2 mainUv, vec3 lightDirection, vec4 lightDiffuse, float shadowAttenuation) {\\n    float _receiveShadow = receiveShadowRate;\\n#ifdef RECEIVE_SHADOW\\n    _receiveShadow = _receiveShadow * texture2D(receiveShadowSampler, mainUv).r * vReceiveShadowInfos.y;\\n#endif\\n\\n    float _shadingGrade = 0.0;\\n#ifdef SHADING_GRADE\\n    _shadingGrade = 1.0 - texture2D(shadingGradeSampler, mainUv).r * vShadingGradeInfos.y;\\n#endif\\n    _shadingGrade = 1.0 - shadingGradeRate * _shadingGrade;\\n\\n    // Lighting\\n    vec3 _lightColor = lightDiffuse.rgb * step(0.5, length(lightDirection)); // length(lightDir) is zero if directional light is disabled.\\n    float _dotNL = dot(lightDirection, worldNormal);\\n#ifdef MTOON_FORWARD_ADD\\n    float _lightAttenuation = 1.0;\\n#else\\n    float _lightAttenuation = shadowAttenuation * mix(1.0, shadowAttenuation, _receiveShadow);\\n#endif\\n\\n    // lighting intensity\\n    float _lightIntensity = _dotNL;\\n    _lightIntensity = _lightIntensity * 0.5 + 0.5; // from [-1, +1] to [0, 1]\\n    _lightIntensity = _lightIntensity * _lightAttenuation; // receive shadow\\n    _lightIntensity = _lightIntensity * _shadingGrade; // darker\\n    _lightIntensity = _lightIntensity * 2.0 - 1.0; // from [0, 1] to [-1, +1]\\n    // tooned. mapping from [minIntensityThreshold, maxIntensityThreshold] to [0, 1]\\n    float _maxIntensityThreshold = mix(1.0, shadeShift, shadeToony);\\n    float _minIntensityThreshold = shadeShift;\\n    _lightIntensity = clamp((_lightIntensity - _minIntensityThreshold) / max(EPS_COL, (_maxIntensityThreshold - _minIntensityThreshold)), 0.0, 1.0);\\n\\n    // Albedo color\\n    vec3 _shade = vShadeColor;\\n#ifdef SHADE\\n    _shade = _shade * texture2D(shadeSampler, mainUv).rgb * vShadeInfos.y;\\n#endif\\n\\n    vec4 _lit = vDiffuseColor;\\n#ifdef DIFFUSE\\n    _lit = _lit * texture2D(diffuseSampler, mainUv) * vDiffuseInfos.y;\\n#endif\\n    vec3 _col = mix(_shade.rgb, _lit.rgb, _lightIntensity);\\n\\n    // Direct Light\\n    vec3 _lighting = _lightColor;\\n    _lighting = mix(_lighting, vec3(max(EPS_COL, max(_lighting.x, max(_lighting.y, _lighting.z)))), lightColorAttenuation); // color atten\\n#ifdef MTOON_FORWARD_ADD\\n    _lighting *= 0.5; // darken if additional light\\n    _lighting *= min(0, dotNL) + 1.0; // darken dotNL < 0 area by using half lambert\\n    _lighting *= shadowAttenuation; // darken if receiving shadow\\n#else\\n    // base light does not darken.\\n#endif\\n    _col *= _lighting;\\n\\n    // Indirect Light\\n#ifdef MTOON_FORWARD_ADD\\n#else\\n    vec3 _toonedGI = vAmbientColor.rgb; // TODO: GI\\n    vec3 _indirectLighting = mix(_toonedGI, vAmbientColor.rgb, indirectLightIntensity);\\n    _indirectLighting = mix(_indirectLighting, vec3(max(EPS_COL, max(_indirectLighting.x, max(_indirectLighting.y, _indirectLighting.z)))), lightColorAttenuation); // color atten\\n    _col += _indirectLighting * _lit.rgb;\\n\\n    _col = min(_col.rgb, _lit.rgb); // comment out if you want to PBR absolutely.\\n#endif\\n\\n    // parametric rim lighting\\n#ifdef MTOON_FORWARD_ADD\\n    vec3 _staticRimLighting = vec3(0.0);\\n    vec3 _mixedRimLighting = _lighting;\\n#else\\n    vec3 _staticRimLighting = vec3(1.0);\\n    vec3 _mixedRimLighting = _lighting + _indirectLighting;\\n#endif\\n    vec3 _rimLighting = mix(_staticRimLighting, _mixedRimLighting, rimLightingMix);\\n    vec3 _rimColor = vRimColor.rgb;\\n#ifdef RIM\\n    _rimColor = _rimColor * texture2D(rimSampler, vRimUV + mainUv).rgb * vRimInfos.y;\\n#endif\\n    vec3 _rim = pow(clamp(1.0 - dot(worldNormal, worldView) + rimLift, 0.0, 1.0), rimFresnelPower) * _rimColor.rgb;\\n    _col += mix(_rim * _rimLighting, vec3(0.0), isOutline);\\n\\n    // additive matcap\\n#ifdef MTOON_FORWARD_ADD\\n#else\\n#ifdef MATCAP\\n    vec3 _worldViewUp = normalize(vEyeUp - worldView * dot(worldView, vEyeUp));\\n    vec3 _worldViewRight = normalize(cross(worldView, _worldViewUp));\\n    vec2 _matCapUv = vec2(dot(_worldViewRight, worldNormal), dot(_worldViewUp, worldNormal)) * 0.5 + 0.5;\\n    // uv.y is reversed\\n    _matCapUv.y = (1.0 - _matCapUv.y);\\n    vec3 _matCapLighting = texture2D(matCapSampler, _matCapUv).rgb * vMatCapInfos.y;\\n    _col += mix(_matCapLighting, vec3(0.0), isOutline);\\n#endif\\n#endif\\n\\n    // Emission\\n#ifdef MTOON_FORWARD_ADD\\n#else\\n    vec3 _emission = vEmissiveColor.rgb;\\n#ifdef EMISSIVE\\n     _emission *= texture2D(emissiveSampler, mainUv).rgb * vEmissiveInfos.y;\\n#endif\\n     _col += mix(_emission, vec3(0.0), isOutline);\\n#endif\\n\\n    float _alpha = 1.0;\\n\\n#if defined(ALPHABLEND) || defined(ALPHATEST)\\n    _alpha = mix(_lit.a, _lit.a * vOutlineColor.a, isOutline);\\n#endif\\n\\n    // outline\\n#ifdef MTOON_OUTLINE_COLOR_FIXED\\n    _col = mix(_col, vOutlineColor.rgb, isOutline);\\n#elif defined(MTOON_OUTLINE_COLOR_MIXED)\\n    _col = mix(_col, vOutlineColor.rgb * mix(vec3(1.0), _col, outlineLightingMix), isOutline);\\n#else\\n#endif\\n\\n    // debug\\n#ifdef MTOON_DEBUG_NORMAL\\n    #ifdef MTOON_FORWARD_ADD\\n        return vec4(0.0);\\n    #else\\n        return vec4(worldNormal * 0.5 + 0.5, _lit.a);\\n    #endif\\n#elif defined(MTOON_DEBUG_LITSHADERATE)\\n    #ifdef MTOON_FORWARD_ADD\\n        return vec4(0.0);\\n    #else\\n        return vec4(_lightIntensity, _lit.a);\\n    #endif\\n#endif\\n\\n    return vec4(_col, _alpha);\\n}\\n\";","export default \"#include<__decl__mtoonFragment>\\n\\n#extension GL_OES_standard_derivatives : enable\\n\\n#include<prePassDeclaration>[SCENE_MRT_COUNT]\\n#include<oitDeclaration>\\n\\n#define CUSTOM_FRAGMENT_BEGIN\\n\\n#ifdef LOGARITHMICDEPTH\\n#extension GL_EXT_frag_depth : enable\\n#endif\\n\\n// Constants\\n#define RECIPROCAL_PI2 0.15915494\\n#define PI_2 6.28318530718\\n#define EPS_COL 0.00001\\n\\n// Input\\nvarying vec3 vPositionW;\\n\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n\\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR)\\nvarying vec4 vColor;\\n#endif\\n\\n#include<mainUVVaryingDeclaration>[1..7]\\n\\n// Helper functions\\n#include<helperFunctions>\\n\\n// Lights\\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\\n\\n#include<lightsFragmentFunctions>\\n#include<shadowsFragmentFunctions>\\n\\n// Samplers\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,DIFFUSE,_VARYINGNAME_,Diffuse,_SAMPLERNAME_,diffuse)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,EMISSIVE,_VARYINGNAME_,Emissive,_SAMPLERNAME_,emissive)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,SHADE,_VARYINGNAME_,Shade,_SAMPLERNAME_,shade)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,RECEIVE_SHADOW,_VARYINGNAME_,ReceiveShadow,_SAMPLERNAME_,receiveShadow)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,SHADING_GRADE,_VARYINGNAME_,ShadingGrade,_SAMPLERNAME_,shadingGrade)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,RIM,_VARYINGNAME_,Rim,_SAMPLERNAME_,rim)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,MATCAP,_VARYINGNAME_,MatCap,_SAMPLERNAME_,matCap)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,OUTLINE_WIDTH,_VARYINGNAME_,OutlineWidth,_SAMPLERNAME_,outlineWidth)\\n#include<samplerFragmentDeclaration>(_DEFINENAME_,UV_ANIMATION_MASK,_VARYINGNAME_,UvAnimationMask,_SAMPLERNAME_,uvAnimationMask)\\n\\n#include<mtoonFragmentFunctions>\\n\\n// #ifdef REFRACTION\\n\\n// #ifdef REFRACTIONMAP_3D\\n// uniform samplerCube refractionCubeSampler;\\n// #else\\n// uniform sampler2D refraction2DSampler;\\n// #endif\\n\\n// #endif\\n\\n// #if defined(SPECULARTERM)\\n//     # include<samplerFragmentDeclaration>(_DEFINENAME_,SPECULAR,_VARYINGNAME_,Specular,_SAMPLERNAME_,specular)\\n// #endif\\n\\n// // Fresnel\\n// # include<fresnelFunction>\\n\\n// // Reflection\\n// #ifdef REFLECTION\\n// #ifdef REFLECTIONMAP_3D\\n// uniform samplerCube reflectionCubeSampler;\\n// #else\\n// uniform sampler2D reflection2DSampler;\\n// #endif\\n\\n// #ifdef REFLECTIONMAP_SKYBOX\\n// varying vec3 vPositionUVW;\\n// #else\\n// #if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\\n// varying vec3 vDirectionW;\\n// #endif\\n\\n// #endif\\n\\n// # include<reflectionFunction>\\n\\n// #endif\\n\\n#include<imageProcessingDeclaration>\\n\\n#include<imageProcessingFunctions>\\n\\n#include<bumpFragmentMainFunctions>\\n#include<bumpFragmentFunctions>\\n#include<clipPlaneFragmentDeclaration>\\n#include<logDepthDeclaration>\\n#include<fogFragmentDeclaration>\\n\\n#define CUSTOM_FRAGMENT_DEFINITIONS\\n\\nvoid main(void) {\\n#ifdef MTOON_CLIP_IF_OUTLINE_IS_NONE\\n    #ifdef MTOON_OUTLINE_WIDTH_WORLD\\n    #elif defined(MTOON_OUTLINE_WIDTH_SCREEN)\\n    #else\\n        discard;\\n    #endif\\n#endif\\n\\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\\n\\n#include<oitFragment>\\n\\n#include<clipPlaneFragment>\\n\\n    vec3 viewDirectionW = normalize(vEyePosition.xyz - vPositionW);\\n\\n    // Base color\\n    vec4 baseColor = vec4(1., 1., 1., 1.);\\n    vec3 diffuseColor = vec3(1., 1., 1.);\\n\\n    // Alpha\\n    float alpha = 1.0;\\n\\n    // Bump\\n#ifdef NORMAL\\n     vec3 normalW = normalize(vNormalW);\\n#else\\n     vec3 normalW = normalize(-cross(dFdx(vPositionW), dFdy(vPositionW)));\\n#endif\\n\\n#include<depthPrePass>\\n\\n    // Ambient color\\n    vec3 baseAmbientColor = vec3(1., 1., 1.);\\n    float glossiness = 0.;\\n\\n    // Lighting\\n    vec3 diffuseBase = vec3(0., 0., 0.);\\n    lightingInfo info;\\n    float shadow = 1.;\\n    vec3 lightDirection = vec3(0.0, 1.0, 0.0);\\n    vec4 mtoonDiffuse = vec4(0.0, 0.0, 0.0, 1.0);\\n\\n    // MToon UV\\n    // All textures will use diffuse(_MainTex) UV\\n    vec2 mainUv = vec2(0.0);\\n#ifdef DIFFUSE\\n    mainUv += vDiffuseUV;\\n#elif defined(MAINUV1)\\n    mainUv += vMainUV1;\\n#elif defined(MAINUV2)\\n    mainUv += vMainUV2;\\n#endif\\n\\n    // uv anim\\n    float uvAnim = time.y;\\n#ifdef UV_ANIMATION_MASK\\n    uvAnim *= texture2D(uvAnimationMaskSampler, mainUv).r;\\n#endif\\n    // translate uv in bottom-left origin coordinates.\\n    // uv is reversed\\n    mainUv += vec2(-uvAnimationScrollX, -uvAnimationScrollY) * uvAnim;\\n    // rotate uv counter-clockwise around (0.5, 0.5) in bottom-left origin coordinates.\\n    float rotateRad = uvAnimationRotation * PI_2 * uvAnim;\\n    vec2 rotatePivot = vec2(0.5, 0.5);\\n    mainUv = mat2(cos(rotateRad), -sin(rotateRad), sin(rotateRad), cos(rotateRad)) * (mainUv - rotatePivot) + rotatePivot;\\n\\n#include<mtoonBumpFragment>\\n\\n#ifdef TWOSIDEDLIGHTING\\n    normalW = gl_FrontFacing ? normalW : -normalW;\\n#endif\\n\\n// include customized lightFragment\\n#include<mtoonLightFragment>[0..maxSimultaneousLights]\\n\\n    vec3 finalDiffuse = clamp(diffuseBase, 0.0, 1.0) * baseColor.rgb;\\n\\n    // Composition\\n    vec4 color = vec4(finalDiffuse, clamp(alpha, 0.0, 1.0));\\n\\n    color.rgb = max(color.rgb, 0.);\\n#include<logDepthFragment>\\n#include<fogFragment>\\n\\n// Apply image processing if relevant. As this applies in linear space,\\n// We first move from gamma to linear.\\n#ifdef IMAGEPROCESSINGPOSTPROCESS\\n    color.rgb = toLinearSpace(color.rgb);\\n#else\\n    #ifdef IMAGEPROCESSING\\n        // FIXME: support image processing\\n        // color.rgb = toLinearSpace(color.rgb);\\n        // color = applyImageProcessing(color);\\n    #endif\\n#endif\\n\\n    color.a *= visibility;\\n\\n#ifdef PREMULTIPLYALPHA\\n    // Convert to associative (premultiplied) format if needed.\\n    color.rgb *= color.a;\\n#endif\\n\\n#ifdef PREPASS\\n    float writeGeometryInfo = color.a > 0.4 ? 1.0 : 0.0;\\n\\n    gl_FragData[0] = color; // We can't split irradiance on std material\\n\\n    #ifdef PREPASS_POSITION\\n    gl_FragData[PREPASS_POSITION_INDEX] = vec4(vPositionW, writeGeometryInfo);\\n    #endif\\n\\n    #ifdef PREPASS_VELOCITY\\n    vec2 a = (vCurrentPosition.xy / vCurrentPosition.w) * 0.5 + 0.5;\\n    vec2 b = (vPreviousPosition.xy / vPreviousPosition.w) * 0.5 + 0.5;\\n\\n    vec2 velocity = abs(a - b);\\n    velocity = vec2(pow(velocity.x, 1.0 / 3.0), pow(velocity.y, 1.0 / 3.0)) * sign(a - b) * 0.5 + 0.5;\\n\\n    gl_FragData[PREPASS_VELOCITY_INDEX] = vec4(velocity, 0.0, writeGeometryInfo);\\n    #endif\\n\\n    #ifdef PREPASS_IRRADIANCE\\n        gl_FragData[PREPASS_IRRADIANCE_INDEX] = vec4(0.0, 0.0, 0.0, writeGeometryInfo); //  We can't split irradiance on std material\\n    #endif\\n\\n    #ifdef PREPASS_DEPTH\\n        gl_FragData[PREPASS_DEPTH_INDEX] = vec4(vViewPos.z, 0.0, 0.0, writeGeometryInfo); // Linear depth\\n    #endif\\n\\n    #ifdef PREPASS_NORMAL\\n        gl_FragData[PREPASS_NORMAL_INDEX] = vec4((view * vec4(normalW, 0.0)).rgb, writeGeometryInfo); // Normal\\n    #endif\\n\\n    #ifdef PREPASS_ALBEDO_SQRT\\n        gl_FragData[PREPASS_ALBEDO_SQRT_INDEX] = vec4(0.0, 0.0, 0.0, writeGeometryInfo); // We can't split albedo on std material\\n    #endif\\n    #ifdef PREPASS_REFLECTIVITY\\n        #if defined(SPECULAR)\\n            gl_FragData[PREPASS_REFLECTIVITY_INDEX] = vec4(specularMapColor.rgb, specularMapColor.a * writeGeometryInfo);\\n        #else\\n            gl_FragData[PREPASS_REFLECTIVITY_INDEX] = vec4(0.0, 0.0, 0.0, writeGeometryInfo);\\n        #endif\\n    #endif\\n#endif\\n\\n#if !defined(PREPASS) || defined(WEBGL2)\\n    gl_FragColor = color;\\n#endif\\n\\n#if ORDER_INDEPENDENT_TRANSPARENCY\\n    if (fragDepth == nearestDepth) {\\n        frontColor.rgb += color.rgb * color.a * alphaMultiplier;\\n        frontColor.a = 1.0 - alphaMultiplier * (1.0 - color.a);\\n    } else {\\n        backColor += color;\\n    }\\n#endif\\n\\n#define CUSTOM_FRAGMENT_MAIN_END\\n\\n}\\n\";","export default \"// it is based on default.vertex.fx\\n// This include is special, it will be replaced to UboDeclaration(WebGL2) or VertexDeclaration(WebGL1).\\n// @see effect.ts\\n#include<__decl__mtoonVertex>\\n\\n// Attributes\\n\\n#define CUSTOM_VERTEX_BEGIN\\n\\nattribute vec3 position;\\n#ifdef NORMAL\\nattribute vec3 normal;\\n#endif\\n#ifdef TANGENT\\nattribute vec4 tangent;\\n#endif\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#include<uvAttributeDeclaration>[2..7]\\n#ifdef VERTEXCOLOR\\nattribute vec4 color;\\n#endif\\n\\n#include<helperFunctions>\\n\\n#include<bonesDeclaration>\\n#include<bakedVertexAnimationDeclaration>\\n\\n// Uniforms\\n#include<instancesDeclaration>\\n#include<prePassVertexDeclaration>\\n\\n#include<mainUVVaryingDeclaration>[1..7]\\n\\n#include<samplerVertexDeclaration>(_DEFINENAME_,DIFFUSE,_VARYINGNAME_,Diffuse)\\n// # include<samplerVertexDeclaration>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail)\\n// # include<samplerVertexDeclaration>(_DEFINENAME_,AMBIENT,_VARYINGNAME_,Ambient)\\n// # include<samplerVertexDeclaration>(_DEFINENAME_,OPACITY,_VARYINGNAME_,Opacity)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,EMISSIVE,_VARYINGNAME_,Emissive)\\n// # include<samplerVertexDeclaration>(_DEFINENAME_,LIGHTMAP,_VARYINGNAME_,Lightmap)\\n// #if defined(SPECULARTERM)\\n// # include<samplerVertexDeclaration>(_DEFINENAME_,SPECULAR,_VARYINGNAME_,Specular)\\n// #endif\\n#include<samplerVertexDeclaration>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,SHADE,_VARYINGNAME_,Shade)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,RECEIVE_SHADOW,_VARYINGNAME_,ReceiveShadow)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,SHADING_GRADE,_VARYINGNAME_,ShadingGrade)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,RIM,_VARYINGNAME_,Rim)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,MATCAP,_VARYINGNAME_,MatCap)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,OUTLINE_WIDTH,_VARYINGNAME_,OutlineWidth)\\n#include<samplerVertexDeclaration>(_DEFINENAME_,UV_ANIMATION_MASK,_VARYINGNAME_,UvAnimationMask)\\n\\n// Additional Uniforms\\n#ifdef OUTLINE_WIDTH\\n    uniform sampler2D outlineWidthSampler;\\n#endif\\n\\n// Output\\nvarying vec3 vPositionW;\\n#ifdef NORMAL\\nvarying vec3 vNormalW;\\n#endif\\n\\n#if defined(VERTEXCOLOR) || defined(INSTANCESCOLOR)\\nvarying vec4 vColor;\\n#endif\\n\\n#include<bumpVertexDeclaration>\\n\\n#include<clipPlaneVertexDeclaration>\\n\\n#include<fogVertexDeclaration>\\n#include<__decl__lightVxFragment>[0..maxSimultaneousLights]\\n\\n#include<morphTargetsVertexGlobalDeclaration>\\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\\n\\n// #ifdef REFLECTIONMAP_SKYBOX\\n// varying vec3 vPositionUVW;\\n// #endif\\n\\n// #if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\\n// varying vec3 vDirectionW;\\n// #endif\\n\\n#include<logDepthDeclaration>\\n#define CUSTOM_VERTEX_DEFINITIONS\\n\\nvoid main(void) {\\n\\n    #define CUSTOM_VERTEX_MAIN_BEGIN\\n\\n    vec3 positionUpdated = position;\\n#ifdef NORMAL\\n    vec3 normalUpdated = normal;\\n#endif\\n#ifdef TANGENT\\n    vec4 tangentUpdated = tangent;\\n#endif\\n#ifdef UV1\\n    vec2 uvUpdated = uv;\\n#endif\\n\\n#include<morphTargetsVertexGlobal>\\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\\n\\n// #ifdef REFLECTIONMAP_SKYBOX\\n//     vPositionUVW = positionUpdated;\\n// #endif\\n\\n#define CUSTOM_VERTEX_UPDATE_POSITION\\n\\n#define CUSTOM_VERTEX_UPDATE_NORMAL\\n\\n#include<instancesVertex>\\n\\n#if defined(PREPASS) && defined(PREPASS_VELOCITY) && !defined(BONES_VELOCITY_ENABLED)\\n    // Compute velocity before bones computation\\n    vCurrentPosition = viewProjection * finalWorld * vec4(positionUpdated, 1.0);\\n    vPreviousPosition = previousViewProjection * finalPreviousWorld * vec4(positionUpdated, 1.0);\\n#endif\\n\\n#include<bonesVertex>\\n#include<bakedVertexAnimation>\\n\\n    // Texture coordinates\\n#ifndef UV1\\n    vec2 uvUpdated = vec2(0., 0.);\\n#endif\\n#ifdef MAINUV1\\n    vMainUV1 = uvUpdated;\\n#endif\\n#include<uvVariableDeclaration>[2..7]\\n\\n    float outlineTex = 1.0;\\n    if (isOutline == 1.0) {\\n#ifdef OUTLINE_WIDTH\\n    #if OUTLINE_WIDTHDIRECTUV == 0\\n        if (vOutlineWidthInfos.x == 0.)\\n        {\\n            vOutlineWidthUV = vec2(outlineWidthMatrix * vec4(uvUpdated, 1.0, 0.0));\\n        }\\n        #ifdef UV2\\n        else if (vOutlineWidthInfos.x == 1.)\\n        {\\n            vOutlineWidthUV = vec2(outlineWidthMatrix * vec4(uv2, 1.0, 0.0));\\n        }\\n        #endif\\n        #ifdef UV3\\n        else if (vOutlineWidthInfos.x == 2.)\\n        {\\n            vOutlineWidthUV = vec2(outlineWidthMatrix * vec4(uv3, 1.0, 0.0));\\n        }\\n        #endif\\n        #ifdef UV4\\n        else if (vOutlineWidthInfos.x == 3.)\\n        {\\n            vOutlineWidthUV = vec2(outlineWidthMatrix * vec4(uv4, 1.0, 0.0));\\n        }\\n        #endif\\n        #ifdef UV5\\n        else if (vOutlineWidthInfos.x == 4.)\\n        {\\n            vOutlineWidthUV = vec2(outlineWidthMatrix * vec4(uv5, 1.0, 0.0));\\n        }\\n        #endif\\n        #ifdef UV6\\n        else if (vOutlineWidthInfos.x == 5.)\\n        {\\n            vOutlineWidthUV = vec2(outlineWidthMatrix * vec4(uv6, 1.0, 0.0));\\n        }\\n        #endif\\n    #elif defined(MAINUV1)\\n        vec2 vOutlineWidthUV = vMainUV1;\\n    #elif defined(MAINUV2)\\n        vec2 vOutlineWidthUV = vMainUV2;\\n    #else\\n        vec2 vOutlineWidthUV = vec2(0., 0.);\\n    #endif\\n    outlineTex = texture2D(outlineWidthSampler, vOutlineWidthUV).r * vOutlineWidthInfos.y;\\n#endif\\n\\n#if defined(MTOON_OUTLINE_WIDTH_WORLD) && defined(NORMAL)\\n        // move slightly world normal\\n        vec3 outlineOffset = normalize(finalWorld * vec4(normalUpdated, 1.0)).xyz * 0.01 * outlineWidth * outlineTex;\\n        positionUpdated.xyz += outlineOffset;\\n#endif\\n    } // End isOutline == 1.0\\n\\n    vec4 worldPos = finalWorld * vec4(positionUpdated, 1.0);\\n\\n#ifdef NORMAL\\n    mat3 normalWorld = mat3(finalWorld);\\n\\n    #if defined(INSTANCES) && defined(THIN_INSTANCES)\\n        vNormalW = normalUpdated / vec3(dot(normalWorld[0], normalWorld[0]), dot(normalWorld[1], normalWorld[1]), dot(normalWorld[2], normalWorld[2]));\\n        vNormalW = normalize(normalWorld * vNormalW);\\n    #else\\n        #ifdef NONUNIFORMSCALING\\n            normalWorld = transposeMat3(inverseMat3(normalWorld));\\n        #endif\\n\\n        vNormalW = normalize(normalWorld * normalUpdated);\\n    #endif\\n#endif\\n\\n#define CUSTOM_VERTEX_UPDATE_WORLDPOS\\n\\n#ifdef MULTIVIEW\\n    if (gl_ViewID_OVR == 0u) {\\n        gl_Position = viewProjection * worldPos;\\n    } else {\\n        gl_Position = viewProjectionR * worldPos;\\n    }\\n#else\\n    gl_Position = viewProjection * worldPos;\\n#endif\\n\\n    vPositionW = vec3(worldPos);\\n\\n#if defined(MTOON_OUTLINE_WIDTH_SCREEN) && defined(NORMAL)\\n    if (isOutline == 1.0) {\\n        vec4 projectedNormal = normalize(viewProjection * finalWorld * vec4(normalUpdated, 1.0));\\n        projectedNormal *= min(worldPos.w, outlineScaledMaxDistance);\\n        projectedNormal.x *= aspect;\\n        worldPos.xy += 0.01 * outlineWidth * outlineTex * projectedNormal.xy * clamp(1.0 - abs(normalize(view * vec4(normalUpdated, 1.0)).z), 0.0, 1.0); // ignore offset when normal toward camera\\n    }\\n#endif\\n\\n    if (isOutline == 1.0) {\\n        worldPos.z += 1E-2 * worldPos.w; // anti-artifact magic from three-vrm\\n    }\\n\\n    gl_Position = viewProjection * worldPos;\\n\\n    worldPos = finalWorld * vec4(positionUpdated, 1.0);\\n    vPositionW = vec3(worldPos);\\n\\n#include<prePassVertex>\\n\\n// #if defined(REFLECTIONMAP_EQUIRECTANGULAR_FIXED) || defined(REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED)\\n//     vDirectionW = normalize(vec3(finalWorld * vec4(positionUpdated, 0.0)));\\n// #endif\\n\\n    #include<samplerVertexImplementation>(_DEFINENAME_,DIFFUSE,_VARYINGNAME_,Diffuse,_MATRIXNAME_,diffuse,_INFONAME_,DiffuseInfos.x)\\n    // # include<samplerVertexImplementation>(_DEFINENAME_,DETAIL,_VARYINGNAME_,Detail,_MATRIXNAME_,detail,_INFONAME_,DetailInfos.x)\\n    // # include<samplerVertexImplementation>(_DEFINENAME_,AMBIENT,_VARYINGNAME_,Ambient,_MATRIXNAME_,ambient,_INFONAME_,AmbientInfos.x)\\n    // # include<samplerVertexImplementation>(_DEFINENAME_,OPACITY,_VARYINGNAME_,Opacity,_MATRIXNAME_,opacity,_INFONAME_,OpacityInfos.x)\\n    #include<samplerVertexImplementation>(_DEFINENAME_,EMISSIVE,_VARYINGNAME_,Emissive,_MATRIXNAME_,emissive,_INFONAME_,EmissiveInfos.x)\\n    // # include<samplerVertexImplementation>(_DEFINENAME_,LIGHTMAP,_VARYINGNAME_,Lightmap,_MATRIXNAME_,lightmap,_INFONAME_,LightmapInfos.x)\\n    // #if defined(SPECULARTERM)\\n    // # include<samplerVertexImplementation>(_DEFINENAME_,SPECULAR,_VARYINGNAME_,Specular,_MATRIXNAME_,specular,_INFONAME_,SpecularInfos.x)\\n    // #endif\\n    #include<samplerVertexImplementation>(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_MATRIXNAME_,bump,_INFONAME_,BumpInfos.x)\\n    #include<samplerVertexImplementation>(_DEFINENAME_,SHADE,_VARYINGNAME_,Shade,_MATRIXNAME_,shade,_INFONAME_,ShadeInfos.x)\\n    #include<samplerVertexImplementation>(_DEFINENAME_,RECEIVE_SHADOW,_VARYINGNAME_,ReceiveShadow,_MATRIXNAME_,receiveShadow,_INFONAME_,ReceiveShadowInfos.x)\\n    #include<samplerVertexImplementation>(_DEFINENAME_,SHADING_GRADE,_VARYINGNAME_,ShadingGrade,_MATRIXNAME_,shadingGrade,_INFONAME_,ShadingGradeInfos.x)\\n    #include<samplerVertexImplementation>(_DEFINENAME_,RIM,_VARYINGNAME_,Rim,_MATRIXNAME_,rim,_INFONAME_,RimInfos.x)\\n    #include<samplerVertexImplementation>(_DEFINENAME_,MATCAP,_VARYINGNAME_,MatCap,_MATRIXNAME_,matCap,_INFONAME_,MatCapInfos.x)\\n    #include<samplerVertexImplementation>(_DEFINENAME_,UV_ANIMATION_MASK,_VARYINGNAME_,UvAnimationMask,_MATRIXNAME_,uvAnimationMask,_INFONAME_,uvAnimationMaskInfos.x)\\n\\n#include<bumpVertex>\\n#include<clipPlaneVertex>\\n#include<fogVertex>\\n#include<shadowsVertex>[0..maxSimultaneousLights]\\n\\n#ifdef VERTEXCOLOR\\n    vColor = color;\\n#elif defined(INSTANCESCOLOR) && INSTANCESCOLOR\\n    vColor = instanceColor;\\n#endif\\n\\n#include<pointCloudVertex>\\n#include<logDepthVertex>\\n\\n#define CUSTOM_VERTEX_MAIN_END\\n\\n}\\n\";","export default \"// it will be replaced to UboDeclaration(WebGL2) or VertexDeclaration(WebGL1).\\n\\nlayout(std140, column_major) uniform;\\n\\nuniform Material\\n{\\n    // Color & Texture\\n    vec4 vDiffuseColor;\\n    vec2 vDiffuseInfos;\\n    mat4 diffuseMatrix;\\n    vec4 vEmissiveColor;\\n    vec2 vEmissiveInfos;\\n    mat4 emissiveMatrix;\\n    vec3 vBumpInfos;\\n    mat4 bumpMatrix;\\n    vec3 vShadeColor;\\n    vec2 vShadeInfos;\\n    mat4 shadeMatrix;\\n    vec2 vReceiveShadowInfos;\\n    mat4 receiveShadowMatrix;\\n    vec2 vShadingGradeInfos;\\n    mat4 shadingGradeMatrix;\\n    vec3 vRimColor;\\n    vec2 vRimInfos;\\n    mat4 rimMatrix;\\n    vec2 vMatCapInfos;\\n    mat4 matCapMatrix;\\n    vec4 vOutlineColor;\\n    vec2 vOutlineWidthInfos;\\n    mat4 outlineWidthMatrix;\\n    vec2 vUvAnimationMaskInfos;\\n    mat4 uvAnimationMaskMatrix;\\n\\n    // babylon specific\\n    vec2 vTangentSpaceParams;\\n    float pointSize;\\n\\n    // MToon params\\n    float shadingGradeRate;\\n    float receiveShadowRate;\\n    float shadeShift;\\n    float shadeToony;\\n    float lightColorAttenuation;\\n    float indirectLightIntensity;\\n    float rimLightingMix;\\n    float rimFresnelPower;\\n    float rimLift;\\n    float outlineWidth;\\n    float outlineScaledMaxDistance;\\n    float outlineLightingMix;\\n    float uvAnimationScrollX;\\n    float uvAnimationScrollY;\\n    float uvAnimationRotation;\\n\\n    vec3 vEyeUp;\\n    float alphaCutOff;\\n    vec3 vAmbientColor;\\n    float aspect;\\n    float isOutline;\\n    vec4 time;\\n};\\n\\n// babylon specific\\n#include<sceneUboDeclaration>\\n#include<meshUboDeclaration>\\n\";","export default \"// Uniforms\\nuniform mat4 viewProjection;\\nuniform mat4 view;\\nuniform float outlineWidth;\\nuniform float outlineScaledMaxDistance;\\nuniform float outlineLightingMix;\\nuniform float isOutline;\\nuniform float aspect;\\n\\n#ifdef DIFFUSE\\nuniform mat4 diffuseMatrix;\\nuniform vec2 vDiffuseInfos;\\n#endif\\n\\n#ifdef EMISSIVE\\nuniform vec2 vEmissiveInfos;\\nuniform mat4 emissiveMatrix;\\n#endif\\n\\n#ifdef BUMP\\nuniform vec3 vBumpInfos;\\nuniform mat4 bumpMatrix;\\n#endif\\n\\n#ifdef SHADE\\nuniform vec2 vShadeInfos;\\nuniform mat4 shadeMatrix;\\n#endif\\n\\n#ifdef RECEIVE_SHADOW\\nuniform vec2 vReceiveShadowInfos;\\nuniform mat4 receiveShadowMatrix;\\n#endif\\n\\n#ifdef SHADING_GRADE\\nuniform vec2 vShadingGradeInfos;\\nuniform mat4 shadingGradeMatrix;\\n#endif\\n\\n#ifdef RIM\\nuniform vec2 vRimInfos;\\nuniform mat4 rimMatrix;\\n#endif\\n\\n#ifdef MATCAP\\nuniform vec2 vMatCapInfos;\\nuniform mat4 matCapMatrix;\\n#endif\\n\\n#ifdef OUTLINE_WIDTH\\nuniform vec2 vOutlineWidthInfos;\\nuniform mat4 outlineWidthMatrix;\\n#endif\\n\\n#ifdef UV_ANIMATION_MASK\\nuniform vec2 vUvAnimationMaskInfos;\\nuniform mat4 uvAnimationMaskMatrix;\\n#endif\\n\\n#ifdef POINTSIZE\\nuniform float pointSize;\\n#endif\\n\";","import { ArcRotateCamera } from '@babylonjs/core/Cameras/arcRotateCamera';\r\nimport { Engine } from '@babylonjs/core/Engines/engine';\r\nimport { DirectionalLight } from '@babylonjs/core/Lights/directionalLight';\r\nimport { HemisphericLight } from '@babylonjs/core/Lights/hemisphericLight';\r\nimport { PointLight } from '@babylonjs/core/Lights/pointLight';\r\nimport { ShadowGenerator } from '@babylonjs/core/Lights/Shadows/shadowGenerator';\r\nimport { Material } from '@babylonjs/core/Materials/material';\r\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture';\r\nimport { Color3, Vector3 } from '@babylonjs/core/Maths/math';\r\nimport { CreateSphere } from '@babylonjs/core/Meshes/Builders/sphereBuilder';\r\nimport { CreateTorusKnot } from '@babylonjs/core/Meshes/Builders/torusKnotBuilder';\r\nimport { VertexBuffer } from '@babylonjs/core/Buffers/buffer';\r\nimport { Scene } from '@babylonjs/core/scene';\r\nimport { MToonMaterial } from '../mtoon-material';\r\n\r\nimport '@babylonjs/core/Helpers/sceneHelpers';\r\nimport '@babylonjs/inspector';\r\n\r\nasync function main() {\r\n    const debugProperties = getDebugProperties();\r\n    const canvas = document.getElementById('main-canvas') as HTMLCanvasElement;\r\n    const engine = new Engine(\r\n        canvas,\r\n        true,\r\n        {\r\n            alpha: false,\r\n            disableWebGL2Support: debugProperties.webgl1,\r\n        },\r\n    );\r\n\r\n    const scene = new Scene(engine);\r\n    const camera = new ArcRotateCamera('MainCamera1', 0, 0, 3, new Vector3(0, 1.5, 0), scene, true);\r\n    camera.lowerRadiusLimit = 0.1;\r\n    camera.upperRadiusLimit = 20;\r\n    camera.wheelDeltaPercentage = 0.01;\r\n    camera.setPosition(new Vector3(0, 1.5, -3));\r\n    camera.setTarget(new Vector3(0, 1.5, 0));\r\n    camera.attachControl(canvas);\r\n\r\n    scene.createDefaultEnvironment({\r\n        createGround: true,\r\n        createSkybox: false,\r\n        enableGroundMirror: false,\r\n        enableGroundShadow: false,\r\n    });\r\n\r\n    // Lights\r\n    const directionalLight = new DirectionalLight('DirectionalLight1', new Vector3(1, -0.5, 0.0), scene);\r\n    directionalLight.position = new Vector3(-50, 25, 0);\r\n    directionalLight.setEnabled(true);\r\n    const hemisphericLight = new HemisphericLight('HemisphericLight1', new Vector3(-0.2, -0.8, -1), scene);\r\n    hemisphericLight.setEnabled(false);\r\n    const pointLight = new PointLight('PointLight1', new Vector3(0, 0, 1), scene);\r\n    pointLight.setEnabled(false);\r\n\r\n    // Meshes\r\n    const standardMaterialSphere = CreateSphere('StandardMaterialSphere1', {}, scene);\r\n    standardMaterialSphere.position = new Vector3(1.2, 1.2, 0);\r\n    standardMaterialSphere.receiveShadows = true;\r\n\r\n    const shadowCaster = CreateTorusKnot('ShadowCaster', {}, scene);\r\n    shadowCaster.position = new Vector3(-10.0, 5.0, 0.0);\r\n    shadowCaster.setEnabled(debugProperties.shadow);\r\n    if (debugProperties.shadow) {\r\n        const shadowGenerator = new ShadowGenerator(1024, directionalLight);\r\n        shadowGenerator.addShadowCaster(shadowCaster);\r\n    }\r\n\r\n    const mtoonMaterials: MToonMaterial[] = [];\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialDefault', scene);\r\n        mat.outlineWidthMode = 1;\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialNormal', scene);\r\n        mat.outlineWidthMode = 2;\r\n        // Textures from https://www.babylonjs-playground.com/#20OAV9#33\r\n        const diffuse = new Texture('http://i.imgur.com/Wk1cGEq.png', scene);\r\n        diffuse.uScale = 4;\r\n        diffuse.vScale = 4;\r\n        mat.diffuseTexture = diffuse;\r\n        mat.shadeTexture = mat.diffuseTexture.clone();\r\n        mat.shadeColor = new Color3(0.871, 0.196, 0.416);\r\n        const bump = new Texture('http://i.imgur.com/wGyk6os.png', scene);\r\n        bump.uScale = 4;\r\n        bump.vScale = 4;\r\n        mat.bumpTexture = bump;\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialTransparent', scene);\r\n        mat.outlineWidthMode = 1;\r\n        // Textures from https://www.babylonjs-playground.com/#YDO1F#18\r\n        mat.diffuseTexture = new Texture('https://upload.wikimedia.org/wikipedia/commons/8/87/Alaskan_Malamute%2BBlank.png', scene);\r\n        mat.diffuseTexture.hasAlpha = true;\r\n        mat.shadeTexture = mat.diffuseTexture.clone();\r\n        mat.alphaBlend = true;\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialTransparentCutout', scene);\r\n        mat.outlineWidthMode = 1;\r\n        // Textures from https://www.babylonjs-playground.com/#YDO1F#18\r\n        mat.diffuseTexture = new Texture('https://upload.wikimedia.org/wikipedia/commons/8/87/Alaskan_Malamute%2BBlank.png', scene);\r\n        mat.diffuseTexture.hasAlpha = true;\r\n        mat.shadeTexture = mat.diffuseTexture.clone();\r\n        mat.alphaTest = true;\r\n        mat.alphaCutOff = 0.500;\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialRim', scene);\r\n        mat.outlineWidthMode = 1;\r\n        mat.diffuseColor = new Color3(0, 0, 0);\r\n        mat.shadeColor = new Color3(0, 0, 0);\r\n        mat.rimColor = new Color3(1, 1, 1);\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialMatCap', scene);\r\n        // Textures from https://www.outworldz.com/cgi/free-seamless-textures.plx?c=UV%20Checker\r\n        mat.matCapTexture = new Texture('resources/matcap.png', scene, true, false);\r\n        mat.diffuseColor = new Color3(0, 0, 0);\r\n        mat.shadeColor = new Color3(0, 0, 0);\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialScroll', scene);\r\n        mat.outlineWidthMode = 1;\r\n        // Textures from https://www.babylonjs-playground.com/#20OAV9#33\r\n        const diffuse = new Texture('http://i.imgur.com/Wk1cGEq.png', scene);\r\n        diffuse.uScale = 4;\r\n        diffuse.vScale = 4;\r\n        mat.diffuseTexture = diffuse;\r\n        mat.shadeTexture = mat.diffuseTexture.clone();\r\n        mat.shadeColor = new Color3(0.5, 0.5, 0.5);\r\n\r\n        const bump = new Texture('http://i.imgur.com/wGyk6os.png', scene);\r\n        bump.uScale = 4;\r\n        bump.vScale = 4;\r\n        mat.bumpTexture = bump;\r\n        mat.uvAnimationScrollX = 0.5;\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialScrollY', scene);\r\n        mat.outlineWidthMode = 1;\r\n        // Textures from https://www.babylonjs-playground.com/#20OAV9#33\r\n        const diffuse = new Texture('http://i.imgur.com/Wk1cGEq.png', scene);\r\n        diffuse.uScale = 4;\r\n        diffuse.vScale = 4;\r\n        mat.diffuseTexture = diffuse;\r\n        mat.shadeTexture = mat.diffuseTexture.clone();\r\n        mat.shadeColor = new Color3(0.5, 0.5, 0.5);\r\n\r\n        const bump = new Texture('http://i.imgur.com/wGyk6os.png', scene);\r\n        bump.uScale = 4;\r\n        bump.vScale = 4;\r\n        mat.bumpTexture = bump;\r\n        mat.uvAnimationScrollY = 0.5;\r\n        mtoonMaterials.push(mat);\r\n    }\r\n    {\r\n        const mat = new MToonMaterial('MtoonMaterialRotation', scene);\r\n        mat.outlineWidthMode = 1;\r\n        // Textures from https://www.babylonjs-playground.com/#20OAV9#33\r\n        const diffuse = new Texture('http://i.imgur.com/Wk1cGEq.png', scene);\r\n        diffuse.uScale = 4;\r\n        diffuse.vScale = 4;\r\n        mat.diffuseTexture = diffuse;\r\n        mat.shadeTexture = mat.diffuseTexture.clone();\r\n        mat.shadeColor = new Color3(0.5, 0.5, 0.5);\r\n\r\n        const bump = new Texture('http://i.imgur.com/wGyk6os.png', scene);\r\n        bump.uScale = 4;\r\n        bump.vScale = 4;\r\n        mat.bumpTexture = bump;\r\n        mat.uvAnimationRotation = 0.1;\r\n        mtoonMaterials.push(mat);\r\n    }\r\n\r\n    mtoonMaterials.forEach((mat, index) => {\r\n        // MToonMaterial は glTF(右手座標) を考慮しているため、 CullMode をデフォルトから反転させる\r\n        mat.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n        mat.cullMode = 1;\r\n        mat.outlineCullMode = 2;\r\n        const sphere = CreateSphere(`${mat.name}_Sphere`, {}, scene);\r\n        sphere.position = new Vector3(-1.2 * index, 1.2, 0);\r\n        sphere.receiveShadows = true;\r\n        sphere.material = mat;\r\n    });\r\n\r\n    {\r\n        // No Normal\r\n        const mat = new MToonMaterial('MToonMaterialNoNormal', scene);\r\n        mat.cullMode = 1;\r\n        mat.outlineCullMode = 2;\r\n        mat.outlineWidthMode = 1;\r\n        const sphere = CreateSphere('MToonMaterialNoNormal_Sphere', {}, scene);\r\n        sphere.position = new Vector3(2.4, 1.2, 0);\r\n        sphere.receiveShadows = true;\r\n        sphere.material = mat;\r\n        if (sphere.geometry) {\r\n            sphere.geometry.removeVerticesData(VertexBuffer.NormalKind);\r\n        }\r\n    }\r\n\r\n    if (debugProperties.inspector) {\r\n       await scene.debugLayer.show({\r\n            globalRoot: document.getElementById('wrapper') as HTMLElement,\r\n            handleResize: true,\r\n        });\r\n    }\r\n\r\n    engine.runRenderLoop(() => {\r\n        scene.render();\r\n        shadowCaster.rotate(Vector3.Up(), 0.01);\r\n    });\r\n    window.addEventListener('resize', () => {\r\n        engine.resize();\r\n    });\r\n    (window as any).currentScene = scene;\r\n}\r\n\r\ninterface DebugProperties {\r\n    webgl1: boolean;\r\n    shadow: boolean;\r\n    inspector: boolean;\r\n}\r\n\r\nfunction getDebugProperties(): DebugProperties {\r\n    const href = window.location.href;\r\n\r\n    return {\r\n        webgl1: href.includes('webgl1'),\r\n        shadow: href.includes('shadow'),\r\n        inspector: href.includes('inspector'),\r\n    };\r\n}\r\n\r\nmain().catch((reason) => {\r\n    console.error(reason);\r\n});\r\n"],"sourceRoot":""}